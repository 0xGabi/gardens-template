/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface EVMScriptRunnerInterface extends ethers.utils.Interface {
  functions: {
    "hasInitialized()": FunctionFragment;
    "getEVMScriptExecutor(bytes)": FunctionFragment;
    "appId()": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "getEVMScriptRegistry()": FunctionFragment;
    "kernel()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "hasInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptExecutor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "hasInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;

  events: {
    "ScriptResult(address,bytes,bytes,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ScriptResult"): EventFragment;
}

export class EVMScriptRunner extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: EVMScriptRunnerInterface;

  functions: {
    hasInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "hasInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    "appId()"(overrides?: CallOverrides): Promise<[string]>;

    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getInitializationBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<[string]>;

    "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    "kernel()"(overrides?: CallOverrides): Promise<[string]>;
  };

  hasInitialized(overrides?: CallOverrides): Promise<boolean>;

  "hasInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  getEVMScriptExecutor(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getEVMScriptExecutor(bytes)"(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  appId(overrides?: CallOverrides): Promise<string>;

  "appId()"(overrides?: CallOverrides): Promise<string>;

  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "getInitializationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

  "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<string>;

  kernel(overrides?: CallOverrides): Promise<string>;

  "kernel()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    hasInitialized(overrides?: CallOverrides): Promise<boolean>;

    "hasInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    appId(overrides?: CallOverrides): Promise<string>;

    "appId()"(overrides?: CallOverrides): Promise<string>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitializationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

    "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<string>;

    kernel(overrides?: CallOverrides): Promise<string>;

    "kernel()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ScriptResult(
      executor: string | null,
      script: null,
      input: null,
      returnData: null
    ): EventFilter;
  };

  estimateGas: {
    hasInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "hasInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    "appId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitializationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    "kernel()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    hasInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hasInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "appId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInitializationBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEVMScriptRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "kernel()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
