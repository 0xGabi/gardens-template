/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AgreementInterface extends ethers.utils.Interface {
  functions: {
    "MANAGE_DISPUTABLE_ROLE()": FunctionFragment;
    "initialize(address,bool,string,bytes,address)": FunctionFragment;
    "activate(address,address,uint64,uint256,uint256)": FunctionFragment;
    "CHANGE_AGREEMENT_ROLE()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MANAGE_DISPUTABLE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, boolean, string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "activate",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "CHANGE_AGREEMENT_ROLE",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MANAGE_DISPUTABLE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CHANGE_AGREEMENT_ROLE",
    data: BytesLike
  ): Result;

  events: {};
}

export class Agreement extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AgreementInterface;

  functions: {
    MANAGE_DISPUTABLE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "MANAGE_DISPUTABLE_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _arbitrator: string,
      _setAppFeesCashier: boolean,
      _title: string,
      _content: BytesLike,
      _stakingFactory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,bool,string,bytes,address)"(
      _arbitrator: string,
      _setAppFeesCashier: boolean,
      _title: string,
      _content: BytesLike,
      _stakingFactory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    activate(
      _disputableAddress: string,
      _collateralToken: string,
      _challengeDuration: BigNumberish,
      _actionAmount: BigNumberish,
      _challengeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "activate(address,address,uint64,uint256,uint256)"(
      _disputableAddress: string,
      _collateralToken: string,
      _challengeDuration: BigNumberish,
      _actionAmount: BigNumberish,
      _challengeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    CHANGE_AGREEMENT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "CHANGE_AGREEMENT_ROLE()"(overrides?: CallOverrides): Promise<[string]>;
  };

  MANAGE_DISPUTABLE_ROLE(overrides?: CallOverrides): Promise<string>;

  "MANAGE_DISPUTABLE_ROLE()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _arbitrator: string,
    _setAppFeesCashier: boolean,
    _title: string,
    _content: BytesLike,
    _stakingFactory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,bool,string,bytes,address)"(
    _arbitrator: string,
    _setAppFeesCashier: boolean,
    _title: string,
    _content: BytesLike,
    _stakingFactory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  activate(
    _disputableAddress: string,
    _collateralToken: string,
    _challengeDuration: BigNumberish,
    _actionAmount: BigNumberish,
    _challengeAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "activate(address,address,uint64,uint256,uint256)"(
    _disputableAddress: string,
    _collateralToken: string,
    _challengeDuration: BigNumberish,
    _actionAmount: BigNumberish,
    _challengeAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  CHANGE_AGREEMENT_ROLE(overrides?: CallOverrides): Promise<string>;

  "CHANGE_AGREEMENT_ROLE()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MANAGE_DISPUTABLE_ROLE(overrides?: CallOverrides): Promise<string>;

    "MANAGE_DISPUTABLE_ROLE()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _arbitrator: string,
      _setAppFeesCashier: boolean,
      _title: string,
      _content: BytesLike,
      _stakingFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,bool,string,bytes,address)"(
      _arbitrator: string,
      _setAppFeesCashier: boolean,
      _title: string,
      _content: BytesLike,
      _stakingFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    activate(
      _disputableAddress: string,
      _collateralToken: string,
      _challengeDuration: BigNumberish,
      _actionAmount: BigNumberish,
      _challengeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "activate(address,address,uint64,uint256,uint256)"(
      _disputableAddress: string,
      _collateralToken: string,
      _challengeDuration: BigNumberish,
      _actionAmount: BigNumberish,
      _challengeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    CHANGE_AGREEMENT_ROLE(overrides?: CallOverrides): Promise<string>;

    "CHANGE_AGREEMENT_ROLE()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    MANAGE_DISPUTABLE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "MANAGE_DISPUTABLE_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _arbitrator: string,
      _setAppFeesCashier: boolean,
      _title: string,
      _content: BytesLike,
      _stakingFactory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,bool,string,bytes,address)"(
      _arbitrator: string,
      _setAppFeesCashier: boolean,
      _title: string,
      _content: BytesLike,
      _stakingFactory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    activate(
      _disputableAddress: string,
      _collateralToken: string,
      _challengeDuration: BigNumberish,
      _actionAmount: BigNumberish,
      _challengeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "activate(address,address,uint64,uint256,uint256)"(
      _disputableAddress: string,
      _collateralToken: string,
      _challengeDuration: BigNumberish,
      _actionAmount: BigNumberish,
      _challengeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    CHANGE_AGREEMENT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "CHANGE_AGREEMENT_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MANAGE_DISPUTABLE_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MANAGE_DISPUTABLE_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _arbitrator: string,
      _setAppFeesCashier: boolean,
      _title: string,
      _content: BytesLike,
      _stakingFactory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,bool,string,bytes,address)"(
      _arbitrator: string,
      _setAppFeesCashier: boolean,
      _title: string,
      _content: BytesLike,
      _stakingFactory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    activate(
      _disputableAddress: string,
      _collateralToken: string,
      _challengeDuration: BigNumberish,
      _actionAmount: BigNumberish,
      _challengeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "activate(address,address,uint64,uint256,uint256)"(
      _disputableAddress: string,
      _collateralToken: string,
      _challengeDuration: BigNumberish,
      _actionAmount: BigNumberish,
      _challengeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    CHANGE_AGREEMENT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CHANGE_AGREEMENT_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
