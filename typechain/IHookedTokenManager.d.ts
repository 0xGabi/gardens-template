/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IHookedTokenManagerInterface extends ethers.utils.Interface {
  functions: {
    "hasInitialized()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "CHANGE_CONTROLLER_ROLE()": FunctionFragment;
    "registerHook(address)": FunctionFragment;
    "ISSUE_ROLE()": FunctionFragment;
    "ASSIGN_ROLE()": FunctionFragment;
    "BURN_ROLE()": FunctionFragment;
    "INIT_ROLE()": FunctionFragment;
    "changeTokenController(address)": FunctionFragment;
    "initialize(address,bool,uint256)": FunctionFragment;
    "MINT_ROLE()": FunctionFragment;
    "REVOKE_VESTINGS_ROLE()": FunctionFragment;
    "SET_HOOK_ROLE()": FunctionFragment;
    "token()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "hasInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "CHANGE_CONTROLLER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerHook",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ISSUE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ASSIGN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "BURN_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "INIT_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeTokenController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "MINT_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REVOKE_VESTINGS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SET_HOOK_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "hasInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CHANGE_CONTROLLER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ISSUE_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ASSIGN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BURN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INIT_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeTokenController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MINT_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REVOKE_VESTINGS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SET_HOOK_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {};
}

export class IHookedTokenManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IHookedTokenManagerInterface;

  functions: {
    hasInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "hasInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    mint(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    CHANGE_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "CHANGE_CONTROLLER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    registerHook(
      _hook: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerHook(address)"(
      _hook: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ISSUE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "ISSUE_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    ASSIGN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "ASSIGN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    BURN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "BURN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    INIT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "INIT_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    changeTokenController(
      _newController: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeTokenController(address)"(
      _newController: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _token: string,
      _transferable: boolean,
      _maxAccountTokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,bool,uint256)"(
      _token: string,
      _transferable: boolean,
      _maxAccountTokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    MINT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "MINT_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    REVOKE_VESTINGS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "REVOKE_VESTINGS_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    SET_HOOK_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "SET_HOOK_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: Overrides): Promise<ContractTransaction>;

    "token()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  hasInitialized(overrides?: CallOverrides): Promise<boolean>;

  "hasInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  mint(
    _receiver: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    _receiver: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  CHANGE_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<string>;

  "CHANGE_CONTROLLER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  registerHook(
    _hook: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerHook(address)"(
    _hook: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ISSUE_ROLE(overrides?: CallOverrides): Promise<string>;

  "ISSUE_ROLE()"(overrides?: CallOverrides): Promise<string>;

  ASSIGN_ROLE(overrides?: CallOverrides): Promise<string>;

  "ASSIGN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  BURN_ROLE(overrides?: CallOverrides): Promise<string>;

  "BURN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  INIT_ROLE(overrides?: CallOverrides): Promise<string>;

  "INIT_ROLE()"(overrides?: CallOverrides): Promise<string>;

  changeTokenController(
    _newController: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeTokenController(address)"(
    _newController: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _token: string,
    _transferable: boolean,
    _maxAccountTokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,bool,uint256)"(
    _token: string,
    _transferable: boolean,
    _maxAccountTokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  MINT_ROLE(overrides?: CallOverrides): Promise<string>;

  "MINT_ROLE()"(overrides?: CallOverrides): Promise<string>;

  REVOKE_VESTINGS_ROLE(overrides?: CallOverrides): Promise<string>;

  "REVOKE_VESTINGS_ROLE()"(overrides?: CallOverrides): Promise<string>;

  SET_HOOK_ROLE(overrides?: CallOverrides): Promise<string>;

  "SET_HOOK_ROLE()"(overrides?: CallOverrides): Promise<string>;

  token(overrides?: Overrides): Promise<ContractTransaction>;

  "token()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    hasInitialized(overrides?: CallOverrides): Promise<boolean>;

    "hasInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    mint(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256)"(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    CHANGE_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<string>;

    "CHANGE_CONTROLLER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    registerHook(_hook: string, overrides?: CallOverrides): Promise<BigNumber>;

    "registerHook(address)"(
      _hook: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ISSUE_ROLE(overrides?: CallOverrides): Promise<string>;

    "ISSUE_ROLE()"(overrides?: CallOverrides): Promise<string>;

    ASSIGN_ROLE(overrides?: CallOverrides): Promise<string>;

    "ASSIGN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    BURN_ROLE(overrides?: CallOverrides): Promise<string>;

    "BURN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    INIT_ROLE(overrides?: CallOverrides): Promise<string>;

    "INIT_ROLE()"(overrides?: CallOverrides): Promise<string>;

    changeTokenController(
      _newController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeTokenController(address)"(
      _newController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _token: string,
      _transferable: boolean,
      _maxAccountTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,bool,uint256)"(
      _token: string,
      _transferable: boolean,
      _maxAccountTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    MINT_ROLE(overrides?: CallOverrides): Promise<string>;

    "MINT_ROLE()"(overrides?: CallOverrides): Promise<string>;

    REVOKE_VESTINGS_ROLE(overrides?: CallOverrides): Promise<string>;

    "REVOKE_VESTINGS_ROLE()"(overrides?: CallOverrides): Promise<string>;

    SET_HOOK_ROLE(overrides?: CallOverrides): Promise<string>;

    "SET_HOOK_ROLE()"(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    hasInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "hasInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    CHANGE_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "CHANGE_CONTROLLER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerHook(_hook: string, overrides?: Overrides): Promise<BigNumber>;

    "registerHook(address)"(
      _hook: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ISSUE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ISSUE_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    ASSIGN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ASSIGN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    BURN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "BURN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    INIT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "INIT_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    changeTokenController(
      _newController: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeTokenController(address)"(
      _newController: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _token: string,
      _transferable: boolean,
      _maxAccountTokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,bool,uint256)"(
      _token: string,
      _transferable: boolean,
      _maxAccountTokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    MINT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "MINT_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    REVOKE_VESTINGS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "REVOKE_VESTINGS_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SET_HOOK_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "SET_HOOK_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: Overrides): Promise<BigNumber>;

    "token()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    hasInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hasInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256)"(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    CHANGE_CONTROLLER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CHANGE_CONTROLLER_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerHook(
      _hook: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerHook(address)"(
      _hook: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ISSUE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ISSUE_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ASSIGN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ASSIGN_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BURN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BURN_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INIT_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "INIT_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeTokenController(
      _newController: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeTokenController(address)"(
      _newController: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _token: string,
      _transferable: boolean,
      _maxAccountTokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,bool,uint256)"(
      _token: string,
      _transferable: boolean,
      _maxAccountTokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    MINT_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MINT_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REVOKE_VESTINGS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "REVOKE_VESTINGS_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SET_HOOK_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SET_HOOK_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: Overrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
