/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface KernelProxyInterface extends ethers.utils.Interface {
  functions: {
    "proxyType()": FunctionFragment;
    "apps(bytes32,bytes32)": FunctionFragment;
    "isDepositable()": FunctionFragment;
    "implementation()": FunctionFragment;
    "recoveryVaultAppId()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "proxyType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "apps",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDepositable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryVaultAppId",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "proxyType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "apps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDepositable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveryVaultAppId",
    data: BytesLike
  ): Result;

  events: {
    "ProxyDeposit(address,uint256)": EventFragment;
    "SetApp(bytes32,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProxyDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetApp"): EventFragment;
}

export class KernelProxy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: KernelProxyInterface;

  functions: {
    proxyType(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { proxyTypeId: BigNumber }>;

    "proxyType()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { proxyTypeId: BigNumber }>;

    apps(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "apps(bytes32,bytes32)"(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isDepositable(overrides?: CallOverrides): Promise<[boolean]>;

    "isDepositable()"(overrides?: CallOverrides): Promise<[boolean]>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    "implementation()"(overrides?: CallOverrides): Promise<[string]>;

    recoveryVaultAppId(overrides?: CallOverrides): Promise<[string]>;

    "recoveryVaultAppId()"(overrides?: CallOverrides): Promise<[string]>;
  };

  proxyType(overrides?: CallOverrides): Promise<BigNumber>;

  "proxyType()"(overrides?: CallOverrides): Promise<BigNumber>;

  apps(
    arg0: BytesLike,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "apps(bytes32,bytes32)"(
    arg0: BytesLike,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  isDepositable(overrides?: CallOverrides): Promise<boolean>;

  "isDepositable()"(overrides?: CallOverrides): Promise<boolean>;

  implementation(overrides?: CallOverrides): Promise<string>;

  "implementation()"(overrides?: CallOverrides): Promise<string>;

  recoveryVaultAppId(overrides?: CallOverrides): Promise<string>;

  "recoveryVaultAppId()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    proxyType(overrides?: CallOverrides): Promise<BigNumber>;

    "proxyType()"(overrides?: CallOverrides): Promise<BigNumber>;

    apps(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "apps(bytes32,bytes32)"(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    isDepositable(overrides?: CallOverrides): Promise<boolean>;

    "isDepositable()"(overrides?: CallOverrides): Promise<boolean>;

    implementation(overrides?: CallOverrides): Promise<string>;

    "implementation()"(overrides?: CallOverrides): Promise<string>;

    recoveryVaultAppId(overrides?: CallOverrides): Promise<string>;

    "recoveryVaultAppId()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ProxyDeposit(sender: null, value: null): EventFilter;

    SetApp(
      namespace: BytesLike | null,
      appId: BytesLike | null,
      app: null
    ): EventFilter;
  };

  estimateGas: {
    proxyType(overrides?: CallOverrides): Promise<BigNumber>;

    "proxyType()"(overrides?: CallOverrides): Promise<BigNumber>;

    apps(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "apps(bytes32,bytes32)"(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDepositable(overrides?: CallOverrides): Promise<BigNumber>;

    "isDepositable()"(overrides?: CallOverrides): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    "implementation()"(overrides?: CallOverrides): Promise<BigNumber>;

    recoveryVaultAppId(overrides?: CallOverrides): Promise<BigNumber>;

    "recoveryVaultAppId()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    proxyType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxyType()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    apps(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "apps(bytes32,bytes32)"(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDepositable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isDepositable()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "implementation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoveryVaultAppId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "recoveryVaultAppId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
