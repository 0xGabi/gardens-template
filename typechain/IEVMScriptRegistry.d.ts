/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IEVMScriptRegistryInterface extends ethers.utils.Interface {
  functions: {
    "getScriptExecutor(bytes)": FunctionFragment;
    "disableScriptExecutor(uint256)": FunctionFragment;
    "addScriptExecutor(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getScriptExecutor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableScriptExecutor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addScriptExecutor",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getScriptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableScriptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addScriptExecutor",
    data: BytesLike
  ): Result;

  events: {};
}

export class IEVMScriptRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IEVMScriptRegistryInterface;

  functions: {
    getScriptExecutor(
      script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getScriptExecutor(bytes)"(
      script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    disableScriptExecutor(
      executorId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "disableScriptExecutor(uint256)"(
      executorId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addScriptExecutor(
      executor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addScriptExecutor(address)"(
      executor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getScriptExecutor(
    script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getScriptExecutor(bytes)"(
    script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  disableScriptExecutor(
    executorId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "disableScriptExecutor(uint256)"(
    executorId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addScriptExecutor(
    executor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addScriptExecutor(address)"(
    executor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getScriptExecutor(
      script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getScriptExecutor(bytes)"(
      script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    disableScriptExecutor(
      executorId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "disableScriptExecutor(uint256)"(
      executorId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addScriptExecutor(
      executor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addScriptExecutor(address)"(
      executor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getScriptExecutor(
      script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getScriptExecutor(bytes)"(
      script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableScriptExecutor(
      executorId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "disableScriptExecutor(uint256)"(
      executorId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addScriptExecutor(
      executor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addScriptExecutor(address)"(
      executor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getScriptExecutor(
      script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getScriptExecutor(bytes)"(
      script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableScriptExecutor(
      executorId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "disableScriptExecutor(uint256)"(
      executorId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addScriptExecutor(
      executor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addScriptExecutor(address)"(
      executor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
