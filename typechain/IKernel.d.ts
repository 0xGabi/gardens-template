/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IKernelInterface extends ethers.utils.Interface {
  functions: {
    "getRecoveryVault()": FunctionFragment;
    "allowRecoverability(address)": FunctionFragment;
    "transferToVault(address)": FunctionFragment;
    "setApp(bytes32,bytes32,address)": FunctionFragment;
    "getApp(bytes32,bytes32)": FunctionFragment;
    "acl()": FunctionFragment;
    "hasPermission(address,address,bytes32,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getRecoveryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowRecoverability",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setApp",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getApp",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "acl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [string, string, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getRecoveryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowRecoverability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setApp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getApp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "acl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;

  events: {
    "RecoverToVault(address,address,uint256)": EventFragment;
    "SetApp(bytes32,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RecoverToVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetApp"): EventFragment;
}

export class IKernel extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IKernelInterface;

  functions: {
    getRecoveryVault(overrides?: CallOverrides): Promise<[string]>;

    "getRecoveryVault()"(overrides?: CallOverrides): Promise<[string]>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "allowRecoverability(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferToVault(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferToVault(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApp(
      namespace: BytesLike,
      appId: BytesLike,
      app: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApp(bytes32,bytes32,address)"(
      namespace: BytesLike,
      appId: BytesLike,
      app: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getApp(
      namespace: BytesLike,
      appId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getApp(bytes32,bytes32)"(
      namespace: BytesLike,
      appId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    acl(overrides?: CallOverrides): Promise<[string]>;

    "acl()"(overrides?: CallOverrides): Promise<[string]>;

    hasPermission(
      who: string,
      where: string,
      what: BytesLike,
      how: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasPermission(address,address,bytes32,bytes)"(
      who: string,
      where: string,
      what: BytesLike,
      how: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  getRecoveryVault(overrides?: CallOverrides): Promise<string>;

  "getRecoveryVault()"(overrides?: CallOverrides): Promise<string>;

  allowRecoverability(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "allowRecoverability(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferToVault(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferToVault(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApp(
    namespace: BytesLike,
    appId: BytesLike,
    app: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApp(bytes32,bytes32,address)"(
    namespace: BytesLike,
    appId: BytesLike,
    app: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getApp(
    namespace: BytesLike,
    appId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApp(bytes32,bytes32)"(
    namespace: BytesLike,
    appId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  acl(overrides?: CallOverrides): Promise<string>;

  "acl()"(overrides?: CallOverrides): Promise<string>;

  hasPermission(
    who: string,
    where: string,
    what: BytesLike,
    how: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasPermission(address,address,bytes32,bytes)"(
    who: string,
    where: string,
    what: BytesLike,
    how: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    getRecoveryVault(overrides?: CallOverrides): Promise<string>;

    "getRecoveryVault()"(overrides?: CallOverrides): Promise<string>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "allowRecoverability(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferToVault(token: string, overrides?: CallOverrides): Promise<void>;

    "transferToVault(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setApp(
      namespace: BytesLike,
      appId: BytesLike,
      app: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApp(bytes32,bytes32,address)"(
      namespace: BytesLike,
      appId: BytesLike,
      app: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getApp(
      namespace: BytesLike,
      appId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApp(bytes32,bytes32)"(
      namespace: BytesLike,
      appId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    acl(overrides?: CallOverrides): Promise<string>;

    "acl()"(overrides?: CallOverrides): Promise<string>;

    hasPermission(
      who: string,
      where: string,
      what: BytesLike,
      how: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasPermission(address,address,bytes32,bytes)"(
      who: string,
      where: string,
      what: BytesLike,
      how: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    RecoverToVault(
      vault: string | null,
      token: string | null,
      amount: null
    ): EventFilter;

    SetApp(
      namespace: BytesLike | null,
      appId: BytesLike | null,
      app: null
    ): EventFilter;
  };

  estimateGas: {
    getRecoveryVault(overrides?: CallOverrides): Promise<BigNumber>;

    "getRecoveryVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowRecoverability(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferToVault(token: string, overrides?: Overrides): Promise<BigNumber>;

    "transferToVault(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApp(
      namespace: BytesLike,
      appId: BytesLike,
      app: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApp(bytes32,bytes32,address)"(
      namespace: BytesLike,
      appId: BytesLike,
      app: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getApp(
      namespace: BytesLike,
      appId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApp(bytes32,bytes32)"(
      namespace: BytesLike,
      appId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    acl(overrides?: CallOverrides): Promise<BigNumber>;

    "acl()"(overrides?: CallOverrides): Promise<BigNumber>;

    hasPermission(
      who: string,
      where: string,
      what: BytesLike,
      how: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasPermission(address,address,bytes32,bytes)"(
      who: string,
      where: string,
      what: BytesLike,
      how: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getRecoveryVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRecoveryVault()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowRecoverability(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferToVault(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferToVault(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApp(
      namespace: BytesLike,
      appId: BytesLike,
      app: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApp(bytes32,bytes32,address)"(
      namespace: BytesLike,
      appId: BytesLike,
      app: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getApp(
      namespace: BytesLike,
      appId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApp(bytes32,bytes32)"(
      namespace: BytesLike,
      appId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "acl()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasPermission(
      who: string,
      where: string,
      what: BytesLike,
      how: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasPermission(address,address,bytes32,bytes)"(
      who: string,
      where: string,
      what: BytesLike,
      how: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
