/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface VotingInterface extends ethers.utils.Interface {
  functions: {
    "hasInitialized()": FunctionFragment;
    "getEVMScriptExecutor(bytes)": FunctionFragment;
    "getRecoveryVault()": FunctionFragment;
    "MODIFY_QUORUM_ROLE()": FunctionFragment;
    "getVoterState(uint256,address)": FunctionFragment;
    "getVote(uint256)": FunctionFragment;
    "changeMinAcceptQuorumPct(uint64)": FunctionFragment;
    "MODIFY_SUPPORT_ROLE()": FunctionFragment;
    "changeSupportRequiredPct(uint64)": FunctionFragment;
    "allowRecoverability(address)": FunctionFragment;
    "appId()": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "transferToVault(address)": FunctionFragment;
    "canPerform(address,bytes32,uint256[])": FunctionFragment;
    "getEVMScriptRegistry()": FunctionFragment;
    "voteTime()": FunctionFragment;
    "CREATE_VOTES_ROLE()": FunctionFragment;
    "canForward(address,bytes)": FunctionFragment;
    "canExecute(uint256)": FunctionFragment;
    "canVote(uint256,address)": FunctionFragment;
    "kernel()": FunctionFragment;
    "newVote(bytes,string)": FunctionFragment;
    "forward(bytes)": FunctionFragment;
    "minAcceptQuorumPct()": FunctionFragment;
    "isPetrified()": FunctionFragment;
    "votesLength()": FunctionFragment;
    "vote(uint256,bool,bool)": FunctionFragment;
    "initialize(address,uint64,uint64,uint64)": FunctionFragment;
    "executeVote(uint256)": FunctionFragment;
    "supportRequiredPct()": FunctionFragment;
    "token()": FunctionFragment;
    "PCT_BASE()": FunctionFragment;
    "isForwarder()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "hasInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptExecutor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MODIFY_QUORUM_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterState",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMinAcceptQuorumPct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "MODIFY_SUPPORT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeSupportRequiredPct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowRecoverability",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferToVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform",
    values: [string, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "voteTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CREATE_VOTES_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canForward",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canExecute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canVote",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newVote",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "forward", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "minAcceptQuorumPct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPetrified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportRequiredPct",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "PCT_BASE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isForwarder",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "hasInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MODIFY_QUORUM_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMinAcceptQuorumPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MODIFY_SUPPORT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSupportRequiredPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowRecoverability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voteTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_VOTES_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canForward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canExecute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minAcceptQuorumPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPetrified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportRequiredPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PCT_BASE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isForwarder",
    data: BytesLike
  ): Result;

  events: {
    "StartVote(uint256,address,string)": EventFragment;
    "CastVote(uint256,address,bool,uint256)": EventFragment;
    "ExecuteVote(uint256)": EventFragment;
    "ChangeSupportRequired(uint64)": EventFragment;
    "ChangeMinQuorum(uint64)": EventFragment;
    "ScriptResult(address,bytes,bytes,bytes)": EventFragment;
    "RecoverToVault(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StartVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CastVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeSupportRequired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeMinQuorum"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScriptResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoverToVault"): EventFragment;
}

export class Voting extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VotingInterface;

  functions: {
    hasInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "hasInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRecoveryVault(overrides?: CallOverrides): Promise<[string]>;

    "getRecoveryVault()"(overrides?: CallOverrides): Promise<[string]>;

    MODIFY_QUORUM_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "MODIFY_QUORUM_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    getVoterState(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "getVoterState(uint256,address)"(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getVote(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        open: boolean;
        executed: boolean;
        startDate: BigNumber;
        snapshotBlock: BigNumber;
        supportRequired: BigNumber;
        minAcceptQuorum: BigNumber;
        yea: BigNumber;
        nay: BigNumber;
        votingPower: BigNumber;
        script: string;
      }
    >;

    "getVote(uint256)"(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        open: boolean;
        executed: boolean;
        startDate: BigNumber;
        snapshotBlock: BigNumber;
        supportRequired: BigNumber;
        minAcceptQuorum: BigNumber;
        yea: BigNumber;
        nay: BigNumber;
        votingPower: BigNumber;
        script: string;
      }
    >;

    changeMinAcceptQuorumPct(
      _minAcceptQuorumPct: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeMinAcceptQuorumPct(uint64)"(
      _minAcceptQuorumPct: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    MODIFY_SUPPORT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "MODIFY_SUPPORT_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    changeSupportRequiredPct(
      _supportRequiredPct: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeSupportRequiredPct(uint64)"(
      _supportRequiredPct: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "allowRecoverability(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    "appId()"(overrides?: CallOverrides): Promise<[string]>;

    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getInitializationBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferToVault(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferToVault(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canPerform(address,bytes32,uint256[])"(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<[string]>;

    "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    voteTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "voteTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    CREATE_VOTES_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "CREATE_VOTES_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    canForward(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canForward(address,bytes)"(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canExecute(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canExecute(uint256)"(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canVote(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canVote(uint256,address)"(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    "kernel()"(overrides?: CallOverrides): Promise<[string]>;

    "newVote(bytes,string)"(
      _executionScript: BytesLike,
      _metadata: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newVote(bytes,string,bool,bool)"(
      _executionScript: BytesLike,
      _metadata: string,
      _castVote: boolean,
      _executesIfDecided: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    forward(
      _evmScript: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "forward(bytes)"(
      _evmScript: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    minAcceptQuorumPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minAcceptQuorumPct()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isPetrified(overrides?: CallOverrides): Promise<[boolean]>;

    "isPetrified()"(overrides?: CallOverrides): Promise<[boolean]>;

    votesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "votesLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    vote(
      _voteId: BigNumberish,
      _supports: boolean,
      _executesIfDecided: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "vote(uint256,bool,bool)"(
      _voteId: BigNumberish,
      _supports: boolean,
      _executesIfDecided: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _token: string,
      _supportRequiredPct: BigNumberish,
      _minAcceptQuorumPct: BigNumberish,
      _voteTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,uint64,uint64,uint64)"(
      _token: string,
      _supportRequiredPct: BigNumberish,
      _minAcceptQuorumPct: BigNumberish,
      _voteTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeVote(
      _voteId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeVote(uint256)"(
      _voteId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportRequiredPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    "supportRequiredPct()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    PCT_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PCT_BASE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isForwarder(overrides?: CallOverrides): Promise<[boolean]>;

    "isForwarder()"(overrides?: CallOverrides): Promise<[boolean]>;
  };

  hasInitialized(overrides?: CallOverrides): Promise<boolean>;

  "hasInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  getEVMScriptExecutor(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getEVMScriptExecutor(bytes)"(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRecoveryVault(overrides?: CallOverrides): Promise<string>;

  "getRecoveryVault()"(overrides?: CallOverrides): Promise<string>;

  MODIFY_QUORUM_ROLE(overrides?: CallOverrides): Promise<string>;

  "MODIFY_QUORUM_ROLE()"(overrides?: CallOverrides): Promise<string>;

  getVoterState(
    _voteId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<number>;

  "getVoterState(uint256,address)"(
    _voteId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getVote(
    _voteId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      open: boolean;
      executed: boolean;
      startDate: BigNumber;
      snapshotBlock: BigNumber;
      supportRequired: BigNumber;
      minAcceptQuorum: BigNumber;
      yea: BigNumber;
      nay: BigNumber;
      votingPower: BigNumber;
      script: string;
    }
  >;

  "getVote(uint256)"(
    _voteId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      open: boolean;
      executed: boolean;
      startDate: BigNumber;
      snapshotBlock: BigNumber;
      supportRequired: BigNumber;
      minAcceptQuorum: BigNumber;
      yea: BigNumber;
      nay: BigNumber;
      votingPower: BigNumber;
      script: string;
    }
  >;

  changeMinAcceptQuorumPct(
    _minAcceptQuorumPct: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeMinAcceptQuorumPct(uint64)"(
    _minAcceptQuorumPct: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  MODIFY_SUPPORT_ROLE(overrides?: CallOverrides): Promise<string>;

  "MODIFY_SUPPORT_ROLE()"(overrides?: CallOverrides): Promise<string>;

  changeSupportRequiredPct(
    _supportRequiredPct: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeSupportRequiredPct(uint64)"(
    _supportRequiredPct: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowRecoverability(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "allowRecoverability(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  appId(overrides?: CallOverrides): Promise<string>;

  "appId()"(overrides?: CallOverrides): Promise<string>;

  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "getInitializationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferToVault(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferToVault(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  canPerform(
    _sender: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canPerform(address,bytes32,uint256[])"(
    _sender: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

  "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<string>;

  voteTime(overrides?: CallOverrides): Promise<BigNumber>;

  "voteTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  CREATE_VOTES_ROLE(overrides?: CallOverrides): Promise<string>;

  "CREATE_VOTES_ROLE()"(overrides?: CallOverrides): Promise<string>;

  canForward(
    _sender: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canForward(address,bytes)"(
    _sender: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canExecute(
    _voteId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canExecute(uint256)"(
    _voteId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canVote(
    _voteId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canVote(uint256,address)"(
    _voteId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  kernel(overrides?: CallOverrides): Promise<string>;

  "kernel()"(overrides?: CallOverrides): Promise<string>;

  "newVote(bytes,string)"(
    _executionScript: BytesLike,
    _metadata: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newVote(bytes,string,bool,bool)"(
    _executionScript: BytesLike,
    _metadata: string,
    _castVote: boolean,
    _executesIfDecided: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  forward(
    _evmScript: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "forward(bytes)"(
    _evmScript: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  minAcceptQuorumPct(overrides?: CallOverrides): Promise<BigNumber>;

  "minAcceptQuorumPct()"(overrides?: CallOverrides): Promise<BigNumber>;

  isPetrified(overrides?: CallOverrides): Promise<boolean>;

  "isPetrified()"(overrides?: CallOverrides): Promise<boolean>;

  votesLength(overrides?: CallOverrides): Promise<BigNumber>;

  "votesLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  vote(
    _voteId: BigNumberish,
    _supports: boolean,
    _executesIfDecided: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "vote(uint256,bool,bool)"(
    _voteId: BigNumberish,
    _supports: boolean,
    _executesIfDecided: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _token: string,
    _supportRequiredPct: BigNumberish,
    _minAcceptQuorumPct: BigNumberish,
    _voteTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,uint64,uint64,uint64)"(
    _token: string,
    _supportRequiredPct: BigNumberish,
    _minAcceptQuorumPct: BigNumberish,
    _voteTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeVote(
    _voteId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeVote(uint256)"(
    _voteId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportRequiredPct(overrides?: CallOverrides): Promise<BigNumber>;

  "supportRequiredPct()"(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  PCT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  "PCT_BASE()"(overrides?: CallOverrides): Promise<BigNumber>;

  isForwarder(overrides?: CallOverrides): Promise<boolean>;

  "isForwarder()"(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    hasInitialized(overrides?: CallOverrides): Promise<boolean>;

    "hasInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRecoveryVault(overrides?: CallOverrides): Promise<string>;

    "getRecoveryVault()"(overrides?: CallOverrides): Promise<string>;

    MODIFY_QUORUM_ROLE(overrides?: CallOverrides): Promise<string>;

    "MODIFY_QUORUM_ROLE()"(overrides?: CallOverrides): Promise<string>;

    getVoterState(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<number>;

    "getVoterState(uint256,address)"(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getVote(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        open: boolean;
        executed: boolean;
        startDate: BigNumber;
        snapshotBlock: BigNumber;
        supportRequired: BigNumber;
        minAcceptQuorum: BigNumber;
        yea: BigNumber;
        nay: BigNumber;
        votingPower: BigNumber;
        script: string;
      }
    >;

    "getVote(uint256)"(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        open: boolean;
        executed: boolean;
        startDate: BigNumber;
        snapshotBlock: BigNumber;
        supportRequired: BigNumber;
        minAcceptQuorum: BigNumber;
        yea: BigNumber;
        nay: BigNumber;
        votingPower: BigNumber;
        script: string;
      }
    >;

    changeMinAcceptQuorumPct(
      _minAcceptQuorumPct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeMinAcceptQuorumPct(uint64)"(
      _minAcceptQuorumPct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    MODIFY_SUPPORT_ROLE(overrides?: CallOverrides): Promise<string>;

    "MODIFY_SUPPORT_ROLE()"(overrides?: CallOverrides): Promise<string>;

    changeSupportRequiredPct(
      _supportRequiredPct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeSupportRequiredPct(uint64)"(
      _supportRequiredPct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "allowRecoverability(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    appId(overrides?: CallOverrides): Promise<string>;

    "appId()"(overrides?: CallOverrides): Promise<string>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitializationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferToVault(_token: string, overrides?: CallOverrides): Promise<void>;

    "transferToVault(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canPerform(address,bytes32,uint256[])"(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

    "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<string>;

    voteTime(overrides?: CallOverrides): Promise<BigNumber>;

    "voteTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_VOTES_ROLE(overrides?: CallOverrides): Promise<string>;

    "CREATE_VOTES_ROLE()"(overrides?: CallOverrides): Promise<string>;

    canForward(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canForward(address,bytes)"(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canExecute(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canExecute(uint256)"(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canVote(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canVote(uint256,address)"(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    kernel(overrides?: CallOverrides): Promise<string>;

    "kernel()"(overrides?: CallOverrides): Promise<string>;

    "newVote(bytes,string)"(
      _executionScript: BytesLike,
      _metadata: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newVote(bytes,string,bool,bool)"(
      _executionScript: BytesLike,
      _metadata: string,
      _castVote: boolean,
      _executesIfDecided: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forward(_evmScript: BytesLike, overrides?: CallOverrides): Promise<void>;

    "forward(bytes)"(
      _evmScript: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    minAcceptQuorumPct(overrides?: CallOverrides): Promise<BigNumber>;

    "minAcceptQuorumPct()"(overrides?: CallOverrides): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<boolean>;

    "isPetrified()"(overrides?: CallOverrides): Promise<boolean>;

    votesLength(overrides?: CallOverrides): Promise<BigNumber>;

    "votesLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _voteId: BigNumberish,
      _supports: boolean,
      _executesIfDecided: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "vote(uint256,bool,bool)"(
      _voteId: BigNumberish,
      _supports: boolean,
      _executesIfDecided: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _token: string,
      _supportRequiredPct: BigNumberish,
      _minAcceptQuorumPct: BigNumberish,
      _voteTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,uint64,uint64,uint64)"(
      _token: string,
      _supportRequiredPct: BigNumberish,
      _minAcceptQuorumPct: BigNumberish,
      _voteTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeVote(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeVote(uint256)"(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportRequiredPct(overrides?: CallOverrides): Promise<BigNumber>;

    "supportRequiredPct()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    PCT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    "PCT_BASE()"(overrides?: CallOverrides): Promise<BigNumber>;

    isForwarder(overrides?: CallOverrides): Promise<boolean>;

    "isForwarder()"(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    StartVote(
      voteId: BigNumberish | null,
      creator: string | null,
      metadata: null
    ): EventFilter;

    CastVote(
      voteId: BigNumberish | null,
      voter: string | null,
      supports: null,
      stake: null
    ): EventFilter;

    ExecuteVote(voteId: BigNumberish | null): EventFilter;

    ChangeSupportRequired(supportRequiredPct: null): EventFilter;

    ChangeMinQuorum(minAcceptQuorumPct: null): EventFilter;

    ScriptResult(
      executor: string | null,
      script: null,
      input: null,
      returnData: null
    ): EventFilter;

    RecoverToVault(
      vault: string | null,
      token: string | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    hasInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "hasInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecoveryVault(overrides?: CallOverrides): Promise<BigNumber>;

    "getRecoveryVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    MODIFY_QUORUM_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "MODIFY_QUORUM_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVoterState(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVoterState(uint256,address)"(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVote(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVote(uint256)"(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeMinAcceptQuorumPct(
      _minAcceptQuorumPct: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeMinAcceptQuorumPct(uint64)"(
      _minAcceptQuorumPct: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    MODIFY_SUPPORT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "MODIFY_SUPPORT_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    changeSupportRequiredPct(
      _supportRequiredPct: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeSupportRequiredPct(uint64)"(
      _supportRequiredPct: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowRecoverability(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    "appId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitializationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferToVault(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "transferToVault(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canPerform(address,bytes32,uint256[])"(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    voteTime(overrides?: CallOverrides): Promise<BigNumber>;

    "voteTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_VOTES_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "CREATE_VOTES_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    canForward(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canForward(address,bytes)"(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canExecute(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canExecute(uint256)"(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canVote(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canVote(uint256,address)"(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    "kernel()"(overrides?: CallOverrides): Promise<BigNumber>;

    "newVote(bytes,string)"(
      _executionScript: BytesLike,
      _metadata: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "newVote(bytes,string,bool,bool)"(
      _executionScript: BytesLike,
      _metadata: string,
      _castVote: boolean,
      _executesIfDecided: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    forward(_evmScript: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "forward(bytes)"(
      _evmScript: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    minAcceptQuorumPct(overrides?: CallOverrides): Promise<BigNumber>;

    "minAcceptQuorumPct()"(overrides?: CallOverrides): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<BigNumber>;

    "isPetrified()"(overrides?: CallOverrides): Promise<BigNumber>;

    votesLength(overrides?: CallOverrides): Promise<BigNumber>;

    "votesLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _voteId: BigNumberish,
      _supports: boolean,
      _executesIfDecided: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "vote(uint256,bool,bool)"(
      _voteId: BigNumberish,
      _supports: boolean,
      _executesIfDecided: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _token: string,
      _supportRequiredPct: BigNumberish,
      _minAcceptQuorumPct: BigNumberish,
      _voteTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,uint64,uint64,uint64)"(
      _token: string,
      _supportRequiredPct: BigNumberish,
      _minAcceptQuorumPct: BigNumberish,
      _voteTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeVote(
      _voteId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeVote(uint256)"(
      _voteId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportRequiredPct(overrides?: CallOverrides): Promise<BigNumber>;

    "supportRequiredPct()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    PCT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    "PCT_BASE()"(overrides?: CallOverrides): Promise<BigNumber>;

    isForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    "isForwarder()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    hasInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hasInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecoveryVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRecoveryVault()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MODIFY_QUORUM_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MODIFY_QUORUM_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterState(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVoterState(uint256,address)"(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVote(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVote(uint256)"(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeMinAcceptQuorumPct(
      _minAcceptQuorumPct: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeMinAcceptQuorumPct(uint64)"(
      _minAcceptQuorumPct: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    MODIFY_SUPPORT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MODIFY_SUPPORT_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeSupportRequiredPct(
      _supportRequiredPct: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeSupportRequiredPct(uint64)"(
      _supportRequiredPct: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowRecoverability(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "appId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInitializationBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferToVault(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canPerform(address,bytes32,uint256[])"(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEVMScriptRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "voteTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CREATE_VOTES_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CREATE_VOTES_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canForward(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canForward(address,bytes)"(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canExecute(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canExecute(uint256)"(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canVote(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canVote(uint256,address)"(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "kernel()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newVote(bytes,string)"(
      _executionScript: BytesLike,
      _metadata: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newVote(bytes,string,bool,bool)"(
      _executionScript: BytesLike,
      _metadata: string,
      _castVote: boolean,
      _executesIfDecided: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    forward(
      _evmScript: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "forward(bytes)"(
      _evmScript: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    minAcceptQuorumPct(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minAcceptQuorumPct()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isPetrified()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votesLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      _voteId: BigNumberish,
      _supports: boolean,
      _executesIfDecided: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "vote(uint256,bool,bool)"(
      _voteId: BigNumberish,
      _supports: boolean,
      _executesIfDecided: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _token: string,
      _supportRequiredPct: BigNumberish,
      _minAcceptQuorumPct: BigNumberish,
      _voteTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,uint64,uint64,uint64)"(
      _token: string,
      _supportRequiredPct: BigNumberish,
      _minAcceptQuorumPct: BigNumberish,
      _voteTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeVote(
      _voteId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeVote(uint256)"(
      _voteId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportRequiredPct(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportRequiredPct()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PCT_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PCT_BASE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isForwarder()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
