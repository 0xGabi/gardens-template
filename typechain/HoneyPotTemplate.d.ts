/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface HoneyPotTemplateInterface extends ethers.utils.Interface {
  functions: {
    "createDaoTxThree(address,bool,string,bytes,address,address,uint64,uint256[2])": FunctionFragment;
    "createDaoTxOne(address,uint64[7],bytes32,address[],uint256[3])": FunctionFragment;
    "createDaoTxTwo(uint256[2],address,address[2],uint64[4])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createDaoTxThree",
    values: [
      string,
      boolean,
      string,
      BytesLike,
      string,
      string,
      BigNumberish,
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createDaoTxOne",
    values: [
      string,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      BytesLike,
      string[],
      [BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createDaoTxTwo",
    values: [
      [BigNumberish, BigNumberish],
      string,
      [string, string],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "createDaoTxThree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDaoTxOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDaoTxTwo",
    data: BytesLike
  ): Result;

  events: {
    "DisputableVotingAddress(address)": EventFragment;
    "VoteToken(address)": EventFragment;
    "AgentAddress(address)": EventFragment;
    "HookedTokenManagerAddress(address)": EventFragment;
    "ConvictionVotingAddress(address)": EventFragment;
    "BrightIdRegisterAddress(address)": EventFragment;
    "AgreementAddress(address)": EventFragment;
    "DeployDao(address)": EventFragment;
    "SetupDao(address)": EventFragment;
    "DeployToken(address)": EventFragment;
    "InstalledApp(address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DisputableVotingAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgentAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HookedTokenManagerAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConvictionVotingAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BrightIdRegisterAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployDao"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetupDao"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstalledApp"): EventFragment;
}

export class HoneyPotTemplate extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: HoneyPotTemplateInterface;

  functions: {
    createDaoTxThree(
      _arbitrator: string,
      _setAppFeesCashier: boolean,
      _title: string,
      _content: BytesLike,
      _stakingFactory: string,
      _feeToken: string,
      _challengeDuration: BigNumberish,
      _convictionVotingFees: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createDaoTxThree(address,bool,string,bytes,address,address,uint64,uint256[2])"(
      _arbitrator: string,
      _setAppFeesCashier: boolean,
      _title: string,
      _content: BytesLike,
      _stakingFactory: string,
      _feeToken: string,
      _challengeDuration: BigNumberish,
      _convictionVotingFees: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createDaoTxOne(
      _voteToken: string,
      _disputableVotingSettings: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _1hiveContext: BytesLike,
      _verifiers: string[],
      _brightIdSettings: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createDaoTxOne(address,uint64[7],bytes32,address[],uint256[3])"(
      _voteToken: string,
      _disputableVotingSettings: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _1hiveContext: BytesLike,
      _verifiers: string[],
      _brightIdSettings: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createDaoTxTwo(
      _issuanceSettings: [BigNumberish, BigNumberish],
      _stableToken: string,
      _setupAddresses: [string, string],
      _convictionSettings: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createDaoTxTwo(uint256[2],address,address[2],uint64[4])"(
      _issuanceSettings: [BigNumberish, BigNumberish],
      _stableToken: string,
      _setupAddresses: [string, string],
      _convictionSettings: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  createDaoTxThree(
    _arbitrator: string,
    _setAppFeesCashier: boolean,
    _title: string,
    _content: BytesLike,
    _stakingFactory: string,
    _feeToken: string,
    _challengeDuration: BigNumberish,
    _convictionVotingFees: [BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createDaoTxThree(address,bool,string,bytes,address,address,uint64,uint256[2])"(
    _arbitrator: string,
    _setAppFeesCashier: boolean,
    _title: string,
    _content: BytesLike,
    _stakingFactory: string,
    _feeToken: string,
    _challengeDuration: BigNumberish,
    _convictionVotingFees: [BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createDaoTxOne(
    _voteToken: string,
    _disputableVotingSettings: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    _1hiveContext: BytesLike,
    _verifiers: string[],
    _brightIdSettings: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createDaoTxOne(address,uint64[7],bytes32,address[],uint256[3])"(
    _voteToken: string,
    _disputableVotingSettings: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    _1hiveContext: BytesLike,
    _verifiers: string[],
    _brightIdSettings: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createDaoTxTwo(
    _issuanceSettings: [BigNumberish, BigNumberish],
    _stableToken: string,
    _setupAddresses: [string, string],
    _convictionSettings: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createDaoTxTwo(uint256[2],address,address[2],uint64[4])"(
    _issuanceSettings: [BigNumberish, BigNumberish],
    _stableToken: string,
    _setupAddresses: [string, string],
    _convictionSettings: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    createDaoTxThree(
      _arbitrator: string,
      _setAppFeesCashier: boolean,
      _title: string,
      _content: BytesLike,
      _stakingFactory: string,
      _feeToken: string,
      _challengeDuration: BigNumberish,
      _convictionVotingFees: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    "createDaoTxThree(address,bool,string,bytes,address,address,uint64,uint256[2])"(
      _arbitrator: string,
      _setAppFeesCashier: boolean,
      _title: string,
      _content: BytesLike,
      _stakingFactory: string,
      _feeToken: string,
      _challengeDuration: BigNumberish,
      _convictionVotingFees: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    createDaoTxOne(
      _voteToken: string,
      _disputableVotingSettings: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _1hiveContext: BytesLike,
      _verifiers: string[],
      _brightIdSettings: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    "createDaoTxOne(address,uint64[7],bytes32,address[],uint256[3])"(
      _voteToken: string,
      _disputableVotingSettings: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _1hiveContext: BytesLike,
      _verifiers: string[],
      _brightIdSettings: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    createDaoTxTwo(
      _issuanceSettings: [BigNumberish, BigNumberish],
      _stableToken: string,
      _setupAddresses: [string, string],
      _convictionSettings: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    "createDaoTxTwo(uint256[2],address,address[2],uint64[4])"(
      _issuanceSettings: [BigNumberish, BigNumberish],
      _stableToken: string,
      _setupAddresses: [string, string],
      _convictionSettings: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    DisputableVotingAddress(disputableVoting: null): EventFilter;

    VoteToken(voteToken: null): EventFilter;

    AgentAddress(agentAddress: null): EventFilter;

    HookedTokenManagerAddress(hookedTokenManagerAddress: null): EventFilter;

    ConvictionVotingAddress(convictionVoting: null): EventFilter;

    BrightIdRegisterAddress(brightIdRegister: null): EventFilter;

    AgreementAddress(agreement: null): EventFilter;

    DeployDao(dao: null): EventFilter;

    SetupDao(dao: null): EventFilter;

    DeployToken(token: null): EventFilter;

    InstalledApp(appProxy: null, appId: null): EventFilter;
  };

  estimateGas: {
    createDaoTxThree(
      _arbitrator: string,
      _setAppFeesCashier: boolean,
      _title: string,
      _content: BytesLike,
      _stakingFactory: string,
      _feeToken: string,
      _challengeDuration: BigNumberish,
      _convictionVotingFees: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createDaoTxThree(address,bool,string,bytes,address,address,uint64,uint256[2])"(
      _arbitrator: string,
      _setAppFeesCashier: boolean,
      _title: string,
      _content: BytesLike,
      _stakingFactory: string,
      _feeToken: string,
      _challengeDuration: BigNumberish,
      _convictionVotingFees: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    createDaoTxOne(
      _voteToken: string,
      _disputableVotingSettings: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _1hiveContext: BytesLike,
      _verifiers: string[],
      _brightIdSettings: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createDaoTxOne(address,uint64[7],bytes32,address[],uint256[3])"(
      _voteToken: string,
      _disputableVotingSettings: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _1hiveContext: BytesLike,
      _verifiers: string[],
      _brightIdSettings: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    createDaoTxTwo(
      _issuanceSettings: [BigNumberish, BigNumberish],
      _stableToken: string,
      _setupAddresses: [string, string],
      _convictionSettings: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createDaoTxTwo(uint256[2],address,address[2],uint64[4])"(
      _issuanceSettings: [BigNumberish, BigNumberish],
      _stableToken: string,
      _setupAddresses: [string, string],
      _convictionSettings: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createDaoTxThree(
      _arbitrator: string,
      _setAppFeesCashier: boolean,
      _title: string,
      _content: BytesLike,
      _stakingFactory: string,
      _feeToken: string,
      _challengeDuration: BigNumberish,
      _convictionVotingFees: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createDaoTxThree(address,bool,string,bytes,address,address,uint64,uint256[2])"(
      _arbitrator: string,
      _setAppFeesCashier: boolean,
      _title: string,
      _content: BytesLike,
      _stakingFactory: string,
      _feeToken: string,
      _challengeDuration: BigNumberish,
      _convictionVotingFees: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createDaoTxOne(
      _voteToken: string,
      _disputableVotingSettings: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _1hiveContext: BytesLike,
      _verifiers: string[],
      _brightIdSettings: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createDaoTxOne(address,uint64[7],bytes32,address[],uint256[3])"(
      _voteToken: string,
      _disputableVotingSettings: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _1hiveContext: BytesLike,
      _verifiers: string[],
      _brightIdSettings: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createDaoTxTwo(
      _issuanceSettings: [BigNumberish, BigNumberish],
      _stableToken: string,
      _setupAddresses: [string, string],
      _convictionSettings: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createDaoTxTwo(uint256[2],address,address[2],uint64[4])"(
      _issuanceSettings: [BigNumberish, BigNumberish],
      _stableToken: string,
      _setupAddresses: [string, string],
      _convictionSettings: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
