/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PayrollInterface extends ethers.utils.Interface {
  functions: {
    "hasInitialized()": FunctionFragment;
    "setEmployeeSalary(uint256,uint256)": FunctionFragment;
    "changeAddressByEmployee(address)": FunctionFragment;
    "MANAGE_ALLOWED_TOKENS_ROLE()": FunctionFragment;
    "nextEmployee()": FunctionFragment;
    "terminateEmployee(uint256,uint64)": FunctionFragment;
    "getAllocation(uint256,address)": FunctionFragment;
    "getEVMScriptExecutor(bytes)": FunctionFragment;
    "MODIFY_RATE_EXPIRY_ROLE()": FunctionFragment;
    "finance()": FunctionFragment;
    "getRecoveryVault()": FunctionFragment;
    "ADD_BONUS_ROLE()": FunctionFragment;
    "feed()": FunctionFragment;
    "initialize(address,address,address,uint64)": FunctionFragment;
    "SET_EMPLOYEE_SALARY_ROLE()": FunctionFragment;
    "setRateExpiryTime(uint64)": FunctionFragment;
    "MODIFY_PRICE_FEED_ROLE()": FunctionFragment;
    "TERMINATE_EMPLOYEE_ROLE()": FunctionFragment;
    "setPriceFeed(address)": FunctionFragment;
    "allowRecoverability(address)": FunctionFragment;
    "appId()": FunctionFragment;
    "ADD_REIMBURSEMENT_ROLE()": FunctionFragment;
    "setAllowedToken(address,bool)": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "transferToVault(address)": FunctionFragment;
    "canPerform(address,bytes32,uint256[])": FunctionFragment;
    "getEVMScriptRegistry()": FunctionFragment;
    "getTotalOwedSalary(uint256)": FunctionFragment;
    "addBonus(uint256,uint256)": FunctionFragment;
    "addReimbursement(uint256,uint256)": FunctionFragment;
    "getEmployee(uint256)": FunctionFragment;
    "rateExpiryTime()": FunctionFragment;
    "ADD_EMPLOYEE_ROLE()": FunctionFragment;
    "canForward(address,bytes)": FunctionFragment;
    "kernel()": FunctionFragment;
    "forward(bytes)": FunctionFragment;
    "payday(uint8,uint256,uint256[])": FunctionFragment;
    "isPetrified()": FunctionFragment;
    "addEmployee(address,uint256,uint64,string)": FunctionFragment;
    "denominationToken()": FunctionFragment;
    "isTokenAllowed(address)": FunctionFragment;
    "isForwarder()": FunctionFragment;
    "determineAllocation(address[],uint256[])": FunctionFragment;
    "getEmployeeIdByAddress(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "hasInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEmployeeSalary",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAddressByEmployee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGE_ALLOWED_TOKENS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextEmployee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "terminateEmployee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocation",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptExecutor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "MODIFY_RATE_EXPIRY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRecoveryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ADD_BONUS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SET_EMPLOYEE_SALARY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRateExpiryTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "MODIFY_PRICE_FEED_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TERMINATE_EMPLOYEE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowRecoverability",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ADD_REIMBURSEMENT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedToken",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferToVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform",
    values: [string, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalOwedSalary",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addBonus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addReimbursement",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rateExpiryTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ADD_EMPLOYEE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canForward",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(functionFragment: "forward", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "payday",
    values: [BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isPetrified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addEmployee",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "denominationToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "determineAllocation",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeeIdByAddress",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "hasInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmployeeSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAddressByEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGE_ALLOWED_TOKENS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "terminateEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MODIFY_RATE_EXPIRY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ADD_BONUS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SET_EMPLOYEE_SALARY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRateExpiryTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MODIFY_PRICE_FEED_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TERMINATE_EMPLOYEE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowRecoverability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ADD_REIMBURSEMENT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalOwedSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addBonus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addReimbursement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateExpiryTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ADD_EMPLOYEE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canForward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payday", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPetrified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "denominationToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "determineAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeeIdByAddress",
    data: BytesLike
  ): Result;

  events: {
    "AddEmployee(uint256,address,uint256,uint64,string)": EventFragment;
    "TerminateEmployee(uint256,uint64)": EventFragment;
    "SetEmployeeSalary(uint256,uint256)": EventFragment;
    "AddEmployeeAccruedSalary(uint256,uint256)": EventFragment;
    "AddEmployeeBonus(uint256,uint256)": EventFragment;
    "AddEmployeeReimbursement(uint256,uint256)": EventFragment;
    "ChangeAddressByEmployee(uint256,address,address)": EventFragment;
    "DetermineAllocation(uint256)": EventFragment;
    "SendPayment(uint256,address,address,uint256,uint256,string)": EventFragment;
    "SetAllowedToken(address,bool)": EventFragment;
    "SetPriceFeed(address)": EventFragment;
    "SetRateExpiryTime(uint64)": EventFragment;
    "ScriptResult(address,bytes,bytes,bytes)": EventFragment;
    "RecoverToVault(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddEmployee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TerminateEmployee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEmployeeSalary"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddEmployeeAccruedSalary"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddEmployeeBonus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddEmployeeReimbursement"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeAddressByEmployee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DetermineAllocation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendPayment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAllowedToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRateExpiryTime"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScriptResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoverToVault"): EventFragment;
}

export class Payroll extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PayrollInterface;

  functions: {
    hasInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "hasInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    setEmployeeSalary(
      _employeeId: BigNumberish,
      _denominationSalary: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEmployeeSalary(uint256,uint256)"(
      _employeeId: BigNumberish,
      _denominationSalary: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeAddressByEmployee(
      _newAccountAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeAddressByEmployee(address)"(
      _newAccountAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    MANAGE_ALLOWED_TOKENS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "MANAGE_ALLOWED_TOKENS_ROLE()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    nextEmployee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextEmployee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    terminateEmployee(
      _employeeId: BigNumberish,
      _endDate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "terminateEmployee(uint256,uint64)"(
      _employeeId: BigNumberish,
      _endDate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAllocation(
      _employeeId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getAllocation(uint256,address)"(
      _employeeId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    MODIFY_RATE_EXPIRY_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "MODIFY_RATE_EXPIRY_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    finance(overrides?: CallOverrides): Promise<[string]>;

    "finance()"(overrides?: CallOverrides): Promise<[string]>;

    getRecoveryVault(overrides?: CallOverrides): Promise<[string]>;

    "getRecoveryVault()"(overrides?: CallOverrides): Promise<[string]>;

    ADD_BONUS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "ADD_BONUS_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    feed(overrides?: CallOverrides): Promise<[string]>;

    "feed()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _finance: string,
      _denominationToken: string,
      _priceFeed: string,
      _rateExpiryTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,uint64)"(
      _finance: string,
      _denominationToken: string,
      _priceFeed: string,
      _rateExpiryTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    SET_EMPLOYEE_SALARY_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "SET_EMPLOYEE_SALARY_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    setRateExpiryTime(
      _time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRateExpiryTime(uint64)"(
      _time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    MODIFY_PRICE_FEED_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "MODIFY_PRICE_FEED_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    TERMINATE_EMPLOYEE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "TERMINATE_EMPLOYEE_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    setPriceFeed(
      _feed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPriceFeed(address)"(
      _feed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "allowRecoverability(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    "appId()"(overrides?: CallOverrides): Promise<[string]>;

    ADD_REIMBURSEMENT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "ADD_REIMBURSEMENT_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    setAllowedToken(
      _token: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAllowedToken(address,bool)"(
      _token: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getInitializationBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferToVault(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferToVault(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canPerform(address,bytes32,uint256[])"(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<[string]>;

    "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    getTotalOwedSalary(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTotalOwedSalary(uint256)"(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addBonus(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addBonus(uint256,uint256)"(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addReimbursement(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addReimbursement(uint256,uint256)"(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getEmployee(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[]
      ] & {
        accountAddress: string;
        denominationSalary: BigNumber;
        accruedSalary: BigNumber;
        bonus: BigNumber;
        reimbursements: BigNumber;
        lastPayroll: BigNumber;
        endDate: BigNumber;
        allocationTokens: string[];
      }
    >;

    "getEmployee(uint256)"(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[]
      ] & {
        accountAddress: string;
        denominationSalary: BigNumber;
        accruedSalary: BigNumber;
        bonus: BigNumber;
        reimbursements: BigNumber;
        lastPayroll: BigNumber;
        endDate: BigNumber;
        allocationTokens: string[];
      }
    >;

    rateExpiryTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rateExpiryTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ADD_EMPLOYEE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "ADD_EMPLOYEE_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    canForward(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canForward(address,bytes)"(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    "kernel()"(overrides?: CallOverrides): Promise<[string]>;

    forward(
      _evmScript: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "forward(bytes)"(
      _evmScript: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    payday(
      _type: BigNumberish,
      _requestedAmount: BigNumberish,
      _minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "payday(uint8,uint256,uint256[])"(
      _type: BigNumberish,
      _requestedAmount: BigNumberish,
      _minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<[boolean]>;

    "isPetrified()"(overrides?: CallOverrides): Promise<[boolean]>;

    addEmployee(
      _accountAddress: string,
      _initialDenominationSalary: BigNumberish,
      _startDate: BigNumberish,
      _role: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addEmployee(address,uint256,uint64,string)"(
      _accountAddress: string,
      _initialDenominationSalary: BigNumberish,
      _startDate: BigNumberish,
      _role: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    denominationToken(overrides?: CallOverrides): Promise<[string]>;

    "denominationToken()"(overrides?: CallOverrides): Promise<[string]>;

    isTokenAllowed(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isTokenAllowed(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isForwarder(overrides?: CallOverrides): Promise<[boolean]>;

    "isForwarder()"(overrides?: CallOverrides): Promise<[boolean]>;

    determineAllocation(
      _tokens: string[],
      _distribution: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "determineAllocation(address[],uint256[])"(
      _tokens: string[],
      _distribution: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getEmployeeIdByAddress(
      _accountAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getEmployeeIdByAddress(address)"(
      _accountAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  hasInitialized(overrides?: CallOverrides): Promise<boolean>;

  "hasInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  setEmployeeSalary(
    _employeeId: BigNumberish,
    _denominationSalary: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEmployeeSalary(uint256,uint256)"(
    _employeeId: BigNumberish,
    _denominationSalary: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeAddressByEmployee(
    _newAccountAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeAddressByEmployee(address)"(
    _newAccountAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  MANAGE_ALLOWED_TOKENS_ROLE(overrides?: CallOverrides): Promise<string>;

  "MANAGE_ALLOWED_TOKENS_ROLE()"(overrides?: CallOverrides): Promise<string>;

  nextEmployee(overrides?: CallOverrides): Promise<BigNumber>;

  "nextEmployee()"(overrides?: CallOverrides): Promise<BigNumber>;

  terminateEmployee(
    _employeeId: BigNumberish,
    _endDate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "terminateEmployee(uint256,uint64)"(
    _employeeId: BigNumberish,
    _endDate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAllocation(
    _employeeId: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAllocation(uint256,address)"(
    _employeeId: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEVMScriptExecutor(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getEVMScriptExecutor(bytes)"(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  MODIFY_RATE_EXPIRY_ROLE(overrides?: CallOverrides): Promise<string>;

  "MODIFY_RATE_EXPIRY_ROLE()"(overrides?: CallOverrides): Promise<string>;

  finance(overrides?: CallOverrides): Promise<string>;

  "finance()"(overrides?: CallOverrides): Promise<string>;

  getRecoveryVault(overrides?: CallOverrides): Promise<string>;

  "getRecoveryVault()"(overrides?: CallOverrides): Promise<string>;

  ADD_BONUS_ROLE(overrides?: CallOverrides): Promise<string>;

  "ADD_BONUS_ROLE()"(overrides?: CallOverrides): Promise<string>;

  feed(overrides?: CallOverrides): Promise<string>;

  "feed()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _finance: string,
    _denominationToken: string,
    _priceFeed: string,
    _rateExpiryTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,uint64)"(
    _finance: string,
    _denominationToken: string,
    _priceFeed: string,
    _rateExpiryTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  SET_EMPLOYEE_SALARY_ROLE(overrides?: CallOverrides): Promise<string>;

  "SET_EMPLOYEE_SALARY_ROLE()"(overrides?: CallOverrides): Promise<string>;

  setRateExpiryTime(
    _time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRateExpiryTime(uint64)"(
    _time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  MODIFY_PRICE_FEED_ROLE(overrides?: CallOverrides): Promise<string>;

  "MODIFY_PRICE_FEED_ROLE()"(overrides?: CallOverrides): Promise<string>;

  TERMINATE_EMPLOYEE_ROLE(overrides?: CallOverrides): Promise<string>;

  "TERMINATE_EMPLOYEE_ROLE()"(overrides?: CallOverrides): Promise<string>;

  setPriceFeed(
    _feed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPriceFeed(address)"(
    _feed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowRecoverability(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "allowRecoverability(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  appId(overrides?: CallOverrides): Promise<string>;

  "appId()"(overrides?: CallOverrides): Promise<string>;

  ADD_REIMBURSEMENT_ROLE(overrides?: CallOverrides): Promise<string>;

  "ADD_REIMBURSEMENT_ROLE()"(overrides?: CallOverrides): Promise<string>;

  setAllowedToken(
    _token: string,
    _allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAllowedToken(address,bool)"(
    _token: string,
    _allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "getInitializationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferToVault(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferToVault(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  canPerform(
    _sender: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canPerform(address,bytes32,uint256[])"(
    _sender: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

  "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<string>;

  getTotalOwedSalary(
    _employeeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalOwedSalary(uint256)"(
    _employeeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addBonus(
    _employeeId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addBonus(uint256,uint256)"(
    _employeeId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addReimbursement(
    _employeeId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addReimbursement(uint256,uint256)"(
    _employeeId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getEmployee(
    _employeeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string[]
    ] & {
      accountAddress: string;
      denominationSalary: BigNumber;
      accruedSalary: BigNumber;
      bonus: BigNumber;
      reimbursements: BigNumber;
      lastPayroll: BigNumber;
      endDate: BigNumber;
      allocationTokens: string[];
    }
  >;

  "getEmployee(uint256)"(
    _employeeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string[]
    ] & {
      accountAddress: string;
      denominationSalary: BigNumber;
      accruedSalary: BigNumber;
      bonus: BigNumber;
      reimbursements: BigNumber;
      lastPayroll: BigNumber;
      endDate: BigNumber;
      allocationTokens: string[];
    }
  >;

  rateExpiryTime(overrides?: CallOverrides): Promise<BigNumber>;

  "rateExpiryTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  ADD_EMPLOYEE_ROLE(overrides?: CallOverrides): Promise<string>;

  "ADD_EMPLOYEE_ROLE()"(overrides?: CallOverrides): Promise<string>;

  canForward(
    _sender: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canForward(address,bytes)"(
    _sender: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  kernel(overrides?: CallOverrides): Promise<string>;

  "kernel()"(overrides?: CallOverrides): Promise<string>;

  forward(
    _evmScript: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "forward(bytes)"(
    _evmScript: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  payday(
    _type: BigNumberish,
    _requestedAmount: BigNumberish,
    _minRates: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "payday(uint8,uint256,uint256[])"(
    _type: BigNumberish,
    _requestedAmount: BigNumberish,
    _minRates: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isPetrified(overrides?: CallOverrides): Promise<boolean>;

  "isPetrified()"(overrides?: CallOverrides): Promise<boolean>;

  addEmployee(
    _accountAddress: string,
    _initialDenominationSalary: BigNumberish,
    _startDate: BigNumberish,
    _role: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addEmployee(address,uint256,uint64,string)"(
    _accountAddress: string,
    _initialDenominationSalary: BigNumberish,
    _startDate: BigNumberish,
    _role: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  denominationToken(overrides?: CallOverrides): Promise<string>;

  "denominationToken()"(overrides?: CallOverrides): Promise<string>;

  isTokenAllowed(_token: string, overrides?: CallOverrides): Promise<boolean>;

  "isTokenAllowed(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isForwarder(overrides?: CallOverrides): Promise<boolean>;

  "isForwarder()"(overrides?: CallOverrides): Promise<boolean>;

  determineAllocation(
    _tokens: string[],
    _distribution: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "determineAllocation(address[],uint256[])"(
    _tokens: string[],
    _distribution: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getEmployeeIdByAddress(
    _accountAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getEmployeeIdByAddress(address)"(
    _accountAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    hasInitialized(overrides?: CallOverrides): Promise<boolean>;

    "hasInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    setEmployeeSalary(
      _employeeId: BigNumberish,
      _denominationSalary: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEmployeeSalary(uint256,uint256)"(
      _employeeId: BigNumberish,
      _denominationSalary: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeAddressByEmployee(
      _newAccountAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeAddressByEmployee(address)"(
      _newAccountAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    MANAGE_ALLOWED_TOKENS_ROLE(overrides?: CallOverrides): Promise<string>;

    "MANAGE_ALLOWED_TOKENS_ROLE()"(overrides?: CallOverrides): Promise<string>;

    nextEmployee(overrides?: CallOverrides): Promise<BigNumber>;

    "nextEmployee()"(overrides?: CallOverrides): Promise<BigNumber>;

    terminateEmployee(
      _employeeId: BigNumberish,
      _endDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "terminateEmployee(uint256,uint64)"(
      _employeeId: BigNumberish,
      _endDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllocation(
      _employeeId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAllocation(uint256,address)"(
      _employeeId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    MODIFY_RATE_EXPIRY_ROLE(overrides?: CallOverrides): Promise<string>;

    "MODIFY_RATE_EXPIRY_ROLE()"(overrides?: CallOverrides): Promise<string>;

    finance(overrides?: CallOverrides): Promise<string>;

    "finance()"(overrides?: CallOverrides): Promise<string>;

    getRecoveryVault(overrides?: CallOverrides): Promise<string>;

    "getRecoveryVault()"(overrides?: CallOverrides): Promise<string>;

    ADD_BONUS_ROLE(overrides?: CallOverrides): Promise<string>;

    "ADD_BONUS_ROLE()"(overrides?: CallOverrides): Promise<string>;

    feed(overrides?: CallOverrides): Promise<string>;

    "feed()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _finance: string,
      _denominationToken: string,
      _priceFeed: string,
      _rateExpiryTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,uint64)"(
      _finance: string,
      _denominationToken: string,
      _priceFeed: string,
      _rateExpiryTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    SET_EMPLOYEE_SALARY_ROLE(overrides?: CallOverrides): Promise<string>;

    "SET_EMPLOYEE_SALARY_ROLE()"(overrides?: CallOverrides): Promise<string>;

    setRateExpiryTime(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRateExpiryTime(uint64)"(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    MODIFY_PRICE_FEED_ROLE(overrides?: CallOverrides): Promise<string>;

    "MODIFY_PRICE_FEED_ROLE()"(overrides?: CallOverrides): Promise<string>;

    TERMINATE_EMPLOYEE_ROLE(overrides?: CallOverrides): Promise<string>;

    "TERMINATE_EMPLOYEE_ROLE()"(overrides?: CallOverrides): Promise<string>;

    setPriceFeed(_feed: string, overrides?: CallOverrides): Promise<void>;

    "setPriceFeed(address)"(
      _feed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "allowRecoverability(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    appId(overrides?: CallOverrides): Promise<string>;

    "appId()"(overrides?: CallOverrides): Promise<string>;

    ADD_REIMBURSEMENT_ROLE(overrides?: CallOverrides): Promise<string>;

    "ADD_REIMBURSEMENT_ROLE()"(overrides?: CallOverrides): Promise<string>;

    setAllowedToken(
      _token: string,
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAllowedToken(address,bool)"(
      _token: string,
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitializationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferToVault(_token: string, overrides?: CallOverrides): Promise<void>;

    "transferToVault(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canPerform(address,bytes32,uint256[])"(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

    "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<string>;

    getTotalOwedSalary(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalOwedSalary(uint256)"(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addBonus(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addBonus(uint256,uint256)"(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addReimbursement(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addReimbursement(uint256,uint256)"(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getEmployee(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[]
      ] & {
        accountAddress: string;
        denominationSalary: BigNumber;
        accruedSalary: BigNumber;
        bonus: BigNumber;
        reimbursements: BigNumber;
        lastPayroll: BigNumber;
        endDate: BigNumber;
        allocationTokens: string[];
      }
    >;

    "getEmployee(uint256)"(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[]
      ] & {
        accountAddress: string;
        denominationSalary: BigNumber;
        accruedSalary: BigNumber;
        bonus: BigNumber;
        reimbursements: BigNumber;
        lastPayroll: BigNumber;
        endDate: BigNumber;
        allocationTokens: string[];
      }
    >;

    rateExpiryTime(overrides?: CallOverrides): Promise<BigNumber>;

    "rateExpiryTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    ADD_EMPLOYEE_ROLE(overrides?: CallOverrides): Promise<string>;

    "ADD_EMPLOYEE_ROLE()"(overrides?: CallOverrides): Promise<string>;

    canForward(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canForward(address,bytes)"(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    kernel(overrides?: CallOverrides): Promise<string>;

    "kernel()"(overrides?: CallOverrides): Promise<string>;

    forward(_evmScript: BytesLike, overrides?: CallOverrides): Promise<void>;

    "forward(bytes)"(
      _evmScript: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    payday(
      _type: BigNumberish,
      _requestedAmount: BigNumberish,
      _minRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "payday(uint8,uint256,uint256[])"(
      _type: BigNumberish,
      _requestedAmount: BigNumberish,
      _minRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    isPetrified(overrides?: CallOverrides): Promise<boolean>;

    "isPetrified()"(overrides?: CallOverrides): Promise<boolean>;

    addEmployee(
      _accountAddress: string,
      _initialDenominationSalary: BigNumberish,
      _startDate: BigNumberish,
      _role: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addEmployee(address,uint256,uint64,string)"(
      _accountAddress: string,
      _initialDenominationSalary: BigNumberish,
      _startDate: BigNumberish,
      _role: string,
      overrides?: CallOverrides
    ): Promise<void>;

    denominationToken(overrides?: CallOverrides): Promise<string>;

    "denominationToken()"(overrides?: CallOverrides): Promise<string>;

    isTokenAllowed(_token: string, overrides?: CallOverrides): Promise<boolean>;

    "isTokenAllowed(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isForwarder(overrides?: CallOverrides): Promise<boolean>;

    "isForwarder()"(overrides?: CallOverrides): Promise<boolean>;

    determineAllocation(
      _tokens: string[],
      _distribution: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "determineAllocation(address[],uint256[])"(
      _tokens: string[],
      _distribution: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getEmployeeIdByAddress(
      _accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEmployeeIdByAddress(address)"(
      _accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    AddEmployee(
      employeeId: BigNumberish | null,
      accountAddress: string | null,
      initialDenominationSalary: null,
      startDate: null,
      role: null
    ): EventFilter;

    TerminateEmployee(
      employeeId: BigNumberish | null,
      endDate: null
    ): EventFilter;

    SetEmployeeSalary(
      employeeId: BigNumberish | null,
      denominationSalary: null
    ): EventFilter;

    AddEmployeeAccruedSalary(
      employeeId: BigNumberish | null,
      amount: null
    ): EventFilter;

    AddEmployeeBonus(
      employeeId: BigNumberish | null,
      amount: null
    ): EventFilter;

    AddEmployeeReimbursement(
      employeeId: BigNumberish | null,
      amount: null
    ): EventFilter;

    ChangeAddressByEmployee(
      employeeId: BigNumberish | null,
      newAccountAddress: string | null,
      oldAccountAddress: string | null
    ): EventFilter;

    DetermineAllocation(employeeId: BigNumberish | null): EventFilter;

    SendPayment(
      employeeId: BigNumberish | null,
      accountAddress: string | null,
      token: string | null,
      amount: null,
      exchangeRate: null,
      paymentReference: null
    ): EventFilter;

    SetAllowedToken(token: string | null, allowed: null): EventFilter;

    SetPriceFeed(feed: string | null): EventFilter;

    SetRateExpiryTime(time: null): EventFilter;

    ScriptResult(
      executor: string | null,
      script: null,
      input: null,
      returnData: null
    ): EventFilter;

    RecoverToVault(
      vault: string | null,
      token: string | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    hasInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "hasInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    setEmployeeSalary(
      _employeeId: BigNumberish,
      _denominationSalary: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEmployeeSalary(uint256,uint256)"(
      _employeeId: BigNumberish,
      _denominationSalary: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeAddressByEmployee(
      _newAccountAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeAddressByEmployee(address)"(
      _newAccountAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    MANAGE_ALLOWED_TOKENS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "MANAGE_ALLOWED_TOKENS_ROLE()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextEmployee(overrides?: CallOverrides): Promise<BigNumber>;

    "nextEmployee()"(overrides?: CallOverrides): Promise<BigNumber>;

    terminateEmployee(
      _employeeId: BigNumberish,
      _endDate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "terminateEmployee(uint256,uint64)"(
      _employeeId: BigNumberish,
      _endDate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAllocation(
      _employeeId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAllocation(uint256,address)"(
      _employeeId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MODIFY_RATE_EXPIRY_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "MODIFY_RATE_EXPIRY_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    finance(overrides?: CallOverrides): Promise<BigNumber>;

    "finance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRecoveryVault(overrides?: CallOverrides): Promise<BigNumber>;

    "getRecoveryVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    ADD_BONUS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ADD_BONUS_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    feed(overrides?: CallOverrides): Promise<BigNumber>;

    "feed()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _finance: string,
      _denominationToken: string,
      _priceFeed: string,
      _rateExpiryTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,uint64)"(
      _finance: string,
      _denominationToken: string,
      _priceFeed: string,
      _rateExpiryTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    SET_EMPLOYEE_SALARY_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "SET_EMPLOYEE_SALARY_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    setRateExpiryTime(
      _time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRateExpiryTime(uint64)"(
      _time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    MODIFY_PRICE_FEED_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "MODIFY_PRICE_FEED_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    TERMINATE_EMPLOYEE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "TERMINATE_EMPLOYEE_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    setPriceFeed(_feed: string, overrides?: Overrides): Promise<BigNumber>;

    "setPriceFeed(address)"(
      _feed: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowRecoverability(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    "appId()"(overrides?: CallOverrides): Promise<BigNumber>;

    ADD_REIMBURSEMENT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ADD_REIMBURSEMENT_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAllowedToken(
      _token: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAllowedToken(address,bool)"(
      _token: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitializationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferToVault(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "transferToVault(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canPerform(address,bytes32,uint256[])"(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalOwedSalary(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalOwedSalary(uint256)"(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addBonus(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addBonus(uint256,uint256)"(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addReimbursement(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addReimbursement(uint256,uint256)"(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getEmployee(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEmployee(uint256)"(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateExpiryTime(overrides?: CallOverrides): Promise<BigNumber>;

    "rateExpiryTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    ADD_EMPLOYEE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ADD_EMPLOYEE_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    canForward(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canForward(address,bytes)"(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    "kernel()"(overrides?: CallOverrides): Promise<BigNumber>;

    forward(_evmScript: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "forward(bytes)"(
      _evmScript: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    payday(
      _type: BigNumberish,
      _requestedAmount: BigNumberish,
      _minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "payday(uint8,uint256,uint256[])"(
      _type: BigNumberish,
      _requestedAmount: BigNumberish,
      _minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<BigNumber>;

    "isPetrified()"(overrides?: CallOverrides): Promise<BigNumber>;

    addEmployee(
      _accountAddress: string,
      _initialDenominationSalary: BigNumberish,
      _startDate: BigNumberish,
      _role: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addEmployee(address,uint256,uint64,string)"(
      _accountAddress: string,
      _initialDenominationSalary: BigNumberish,
      _startDate: BigNumberish,
      _role: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    denominationToken(overrides?: CallOverrides): Promise<BigNumber>;

    "denominationToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    isTokenAllowed(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isTokenAllowed(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    "isForwarder()"(overrides?: CallOverrides): Promise<BigNumber>;

    determineAllocation(
      _tokens: string[],
      _distribution: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "determineAllocation(address[],uint256[])"(
      _tokens: string[],
      _distribution: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getEmployeeIdByAddress(
      _accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEmployeeIdByAddress(address)"(
      _accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    hasInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hasInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setEmployeeSalary(
      _employeeId: BigNumberish,
      _denominationSalary: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEmployeeSalary(uint256,uint256)"(
      _employeeId: BigNumberish,
      _denominationSalary: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeAddressByEmployee(
      _newAccountAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeAddressByEmployee(address)"(
      _newAccountAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    MANAGE_ALLOWED_TOKENS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MANAGE_ALLOWED_TOKENS_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextEmployee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextEmployee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    terminateEmployee(
      _employeeId: BigNumberish,
      _endDate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "terminateEmployee(uint256,uint64)"(
      _employeeId: BigNumberish,
      _endDate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAllocation(
      _employeeId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllocation(uint256,address)"(
      _employeeId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MODIFY_RATE_EXPIRY_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MODIFY_RATE_EXPIRY_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "finance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRecoveryVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRecoveryVault()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ADD_BONUS_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ADD_BONUS_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _finance: string,
      _denominationToken: string,
      _priceFeed: string,
      _rateExpiryTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,uint64)"(
      _finance: string,
      _denominationToken: string,
      _priceFeed: string,
      _rateExpiryTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    SET_EMPLOYEE_SALARY_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SET_EMPLOYEE_SALARY_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRateExpiryTime(
      _time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRateExpiryTime(uint64)"(
      _time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    MODIFY_PRICE_FEED_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MODIFY_PRICE_FEED_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TERMINATE_EMPLOYEE_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TERMINATE_EMPLOYEE_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      _feed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPriceFeed(address)"(
      _feed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowRecoverability(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "appId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ADD_REIMBURSEMENT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ADD_REIMBURSEMENT_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAllowedToken(
      _token: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAllowedToken(address,bool)"(
      _token: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInitializationBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferToVault(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canPerform(address,bytes32,uint256[])"(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEVMScriptRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalOwedSalary(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalOwedSalary(uint256)"(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addBonus(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addBonus(uint256,uint256)"(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addReimbursement(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addReimbursement(uint256,uint256)"(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getEmployee(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEmployee(uint256)"(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateExpiryTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rateExpiryTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ADD_EMPLOYEE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ADD_EMPLOYEE_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canForward(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canForward(address,bytes)"(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "kernel()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forward(
      _evmScript: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "forward(bytes)"(
      _evmScript: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    payday(
      _type: BigNumberish,
      _requestedAmount: BigNumberish,
      _minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "payday(uint8,uint256,uint256[])"(
      _type: BigNumberish,
      _requestedAmount: BigNumberish,
      _minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isPetrified()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addEmployee(
      _accountAddress: string,
      _initialDenominationSalary: BigNumberish,
      _startDate: BigNumberish,
      _role: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addEmployee(address,uint256,uint64,string)"(
      _accountAddress: string,
      _initialDenominationSalary: BigNumberish,
      _startDate: BigNumberish,
      _role: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    denominationToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "denominationToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenAllowed(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isTokenAllowed(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isForwarder()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    determineAllocation(
      _tokens: string[],
      _distribution: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "determineAllocation(address[],uint256[])"(
      _tokens: string[],
      _distribution: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getEmployeeIdByAddress(
      _accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEmployeeIdByAddress(address)"(
      _accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
