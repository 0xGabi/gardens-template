/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FinanceInterface extends ethers.utils.Interface {
  functions: {
    "hasInitialized()": FunctionFragment;
    "CREATE_PAYMENTS_ROLE()": FunctionFragment;
    "newScheduledPayment(address,address,uint256,uint64,uint64,uint64,string)": FunctionFragment;
    "executePayment(uint256)": FunctionFragment;
    "initialize(address,uint64)": FunctionFragment;
    "removeBudget(address)": FunctionFragment;
    "getBudget(address)": FunctionFragment;
    "getEVMScriptExecutor(bytes)": FunctionFragment;
    "setPaymentStatus(uint256,bool)": FunctionFragment;
    "getPayment(uint256)": FunctionFragment;
    "getRecoveryVault()": FunctionFragment;
    "getTransaction(uint256)": FunctionFragment;
    "CHANGE_PERIOD_ROLE()": FunctionFragment;
    "CHANGE_BUDGETS_ROLE()": FunctionFragment;
    "receiverExecutePayment(uint256)": FunctionFragment;
    "getPeriod(uint64)": FunctionFragment;
    "setPeriodDuration(uint64)": FunctionFragment;
    "periodsLength()": FunctionFragment;
    "setBudget(address,uint256)": FunctionFragment;
    "allowRecoverability(address)": FunctionFragment;
    "appId()": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "recoverToVault(address)": FunctionFragment;
    "EXECUTE_PAYMENTS_ROLE()": FunctionFragment;
    "currentPeriodId()": FunctionFragment;
    "transferToVault(address)": FunctionFragment;
    "canPerform(address,bytes32,uint256[])": FunctionFragment;
    "getEVMScriptRegistry()": FunctionFragment;
    "tryTransitionAccountingPeriod(uint64)": FunctionFragment;
    "getPeriodDuration()": FunctionFragment;
    "deposit(address,uint256,string)": FunctionFragment;
    "nextPaymentTime(uint256)": FunctionFragment;
    "getPeriodTokenStatement(uint64,address)": FunctionFragment;
    "kernel()": FunctionFragment;
    "paymentsNextIndex()": FunctionFragment;
    "isPetrified()": FunctionFragment;
    "canMakePayment(address,uint256)": FunctionFragment;
    "MANAGE_PAYMENTS_ROLE()": FunctionFragment;
    "transactionsNextIndex()": FunctionFragment;
    "getRemainingBudget(address)": FunctionFragment;
    "newImmediatePayment(address,address,uint256,string)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "hasInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_PAYMENTS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newScheduledPayment",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executePayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBudget",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getBudget", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptExecutor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentStatus",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "CHANGE_PERIOD_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHANGE_BUDGETS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiverExecutePayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeriodDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "periodsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBudget",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowRecoverability",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverToVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "EXECUTE_PAYMENTS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriodId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferToVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform",
    values: [string, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tryTransitionAccountingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nextPaymentTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodTokenStatement",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentsNextIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPetrified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canMakePayment",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGE_PAYMENTS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactionsNextIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingBudget",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "newImmediatePayment",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "hasInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_PAYMENTS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newScheduledPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBudget", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHANGE_PERIOD_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHANGE_BUDGETS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiverExecutePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPeriod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPeriodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBudget", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowRecoverability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXECUTE_PAYMENTS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriodId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryTransitionAccountingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextPaymentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodTokenStatement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentsNextIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPetrified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canMakePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGE_PAYMENTS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionsNextIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newImmediatePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "NewPeriod(uint64,uint64,uint64)": EventFragment;
    "SetBudget(address,uint256,bool)": EventFragment;
    "NewPayment(uint256,address,uint64,string)": EventFragment;
    "NewTransaction(uint256,bool,address,uint256,string)": EventFragment;
    "ChangePaymentState(uint256,bool)": EventFragment;
    "ChangePeriodDuration(uint64)": EventFragment;
    "PaymentFailure(uint256)": EventFragment;
    "ScriptResult(address,bytes,bytes,bytes)": EventFragment;
    "RecoverToVault(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewPeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBudget"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPayment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangePaymentState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangePeriodDuration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScriptResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoverToVault"): EventFragment;
}

export class Finance extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FinanceInterface;

  functions: {
    hasInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "hasInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    CREATE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "CREATE_PAYMENTS_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    newScheduledPayment(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _initialPaymentTime: BigNumberish,
      _interval: BigNumberish,
      _maxExecutions: BigNumberish,
      _reference: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newScheduledPayment(address,address,uint256,uint64,uint64,uint64,string)"(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _initialPaymentTime: BigNumberish,
      _interval: BigNumberish,
      _maxExecutions: BigNumberish,
      _reference: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executePayment(
      _paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executePayment(uint256)"(
      _paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _vault: string,
      _periodDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,uint64)"(
      _vault: string,
      _periodDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeBudget(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeBudget(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBudget(
      _token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { budget: BigNumber; hasBudget: boolean }
    >;

    "getBudget(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { budget: BigNumber; hasBudget: boolean }
    >;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setPaymentStatus(
      _paymentId: BigNumberish,
      _active: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPaymentStatus(uint256,bool)"(
      _paymentId: BigNumberish,
      _active: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getPayment(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        string
      ] & {
        token: string;
        receiver: string;
        amount: BigNumber;
        initialPaymentTime: BigNumber;
        interval: BigNumber;
        maxExecutions: BigNumber;
        inactive: boolean;
        executions: BigNumber;
        createdBy: string;
      }
    >;

    "getPayment(uint256)"(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        string
      ] & {
        token: string;
        receiver: string;
        amount: BigNumber;
        initialPaymentTime: BigNumber;
        interval: BigNumber;
        maxExecutions: BigNumber;
        inactive: boolean;
        executions: BigNumber;
        createdBy: string;
      }
    >;

    getRecoveryVault(overrides?: CallOverrides): Promise<[string]>;

    "getRecoveryVault()"(overrides?: CallOverrides): Promise<[string]>;

    getTransaction(
      _transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        BigNumber
      ] & {
        periodId: BigNumber;
        amount: BigNumber;
        paymentId: BigNumber;
        paymentExecutionNumber: BigNumber;
        token: string;
        entity: string;
        isIncoming: boolean;
        date: BigNumber;
      }
    >;

    "getTransaction(uint256)"(
      _transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        BigNumber
      ] & {
        periodId: BigNumber;
        amount: BigNumber;
        paymentId: BigNumber;
        paymentExecutionNumber: BigNumber;
        token: string;
        entity: string;
        isIncoming: boolean;
        date: BigNumber;
      }
    >;

    CHANGE_PERIOD_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "CHANGE_PERIOD_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    CHANGE_BUDGETS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "CHANGE_BUDGETS_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    receiverExecutePayment(
      _paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "receiverExecutePayment(uint256)"(
      _paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getPeriod(
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        isCurrent: boolean;
        startTime: BigNumber;
        endTime: BigNumber;
        firstTransactionId: BigNumber;
        lastTransactionId: BigNumber;
      }
    >;

    "getPeriod(uint64)"(
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        isCurrent: boolean;
        startTime: BigNumber;
        endTime: BigNumber;
        firstTransactionId: BigNumber;
        lastTransactionId: BigNumber;
      }
    >;

    setPeriodDuration(
      _periodDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPeriodDuration(uint64)"(
      _periodDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    periodsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "periodsLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBudget(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBudget(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowRecoverability(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "allowRecoverability(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    "appId()"(overrides?: CallOverrides): Promise<[string]>;

    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getInitializationBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    recoverToVault(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "recoverToVault(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    EXECUTE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "EXECUTE_PAYMENTS_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    currentPeriodId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentPeriodId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferToVault(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferToVault(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canPerform(address,bytes32,uint256[])"(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<[string]>;

    "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    tryTransitionAccountingPeriod(
      _maxTransitions: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tryTransitionAccountingPeriod(uint64)"(
      _maxTransitions: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getPeriodDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getPeriodDuration()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deposit(address,uint256,string)"(
      _token: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    nextPaymentTime(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "nextPaymentTime(uint256)"(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPeriodTokenStatement(
      _periodId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { expenses: BigNumber; income: BigNumber }
    >;

    "getPeriodTokenStatement(uint64,address)"(
      _periodId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { expenses: BigNumber; income: BigNumber }
    >;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    "kernel()"(overrides?: CallOverrides): Promise<[string]>;

    paymentsNextIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    "paymentsNextIndex()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isPetrified(overrides?: CallOverrides): Promise<[boolean]>;

    "isPetrified()"(overrides?: CallOverrides): Promise<[boolean]>;

    canMakePayment(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canMakePayment(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    MANAGE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "MANAGE_PAYMENTS_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    transactionsNextIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    "transactionsNextIndex()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRemainingBudget(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRemainingBudget(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    newImmediatePayment(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newImmediatePayment(address,address,uint256,string)"(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    "vault()"(overrides?: CallOverrides): Promise<[string]>;
  };

  hasInitialized(overrides?: CallOverrides): Promise<boolean>;

  "hasInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  CREATE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<string>;

  "CREATE_PAYMENTS_ROLE()"(overrides?: CallOverrides): Promise<string>;

  newScheduledPayment(
    _token: string,
    _receiver: string,
    _amount: BigNumberish,
    _initialPaymentTime: BigNumberish,
    _interval: BigNumberish,
    _maxExecutions: BigNumberish,
    _reference: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newScheduledPayment(address,address,uint256,uint64,uint64,uint64,string)"(
    _token: string,
    _receiver: string,
    _amount: BigNumberish,
    _initialPaymentTime: BigNumberish,
    _interval: BigNumberish,
    _maxExecutions: BigNumberish,
    _reference: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executePayment(
    _paymentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executePayment(uint256)"(
    _paymentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _vault: string,
    _periodDuration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,uint64)"(
    _vault: string,
    _periodDuration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeBudget(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeBudget(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBudget(
    _token: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { budget: BigNumber; hasBudget: boolean }>;

  "getBudget(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { budget: BigNumber; hasBudget: boolean }>;

  getEVMScriptExecutor(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getEVMScriptExecutor(bytes)"(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  setPaymentStatus(
    _paymentId: BigNumberish,
    _active: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPaymentStatus(uint256,bool)"(
    _paymentId: BigNumberish,
    _active: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getPayment(
    _paymentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      string
    ] & {
      token: string;
      receiver: string;
      amount: BigNumber;
      initialPaymentTime: BigNumber;
      interval: BigNumber;
      maxExecutions: BigNumber;
      inactive: boolean;
      executions: BigNumber;
      createdBy: string;
    }
  >;

  "getPayment(uint256)"(
    _paymentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      string
    ] & {
      token: string;
      receiver: string;
      amount: BigNumber;
      initialPaymentTime: BigNumber;
      interval: BigNumber;
      maxExecutions: BigNumber;
      inactive: boolean;
      executions: BigNumber;
      createdBy: string;
    }
  >;

  getRecoveryVault(overrides?: CallOverrides): Promise<string>;

  "getRecoveryVault()"(overrides?: CallOverrides): Promise<string>;

  getTransaction(
    _transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      boolean,
      BigNumber
    ] & {
      periodId: BigNumber;
      amount: BigNumber;
      paymentId: BigNumber;
      paymentExecutionNumber: BigNumber;
      token: string;
      entity: string;
      isIncoming: boolean;
      date: BigNumber;
    }
  >;

  "getTransaction(uint256)"(
    _transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      boolean,
      BigNumber
    ] & {
      periodId: BigNumber;
      amount: BigNumber;
      paymentId: BigNumber;
      paymentExecutionNumber: BigNumber;
      token: string;
      entity: string;
      isIncoming: boolean;
      date: BigNumber;
    }
  >;

  CHANGE_PERIOD_ROLE(overrides?: CallOverrides): Promise<string>;

  "CHANGE_PERIOD_ROLE()"(overrides?: CallOverrides): Promise<string>;

  CHANGE_BUDGETS_ROLE(overrides?: CallOverrides): Promise<string>;

  "CHANGE_BUDGETS_ROLE()"(overrides?: CallOverrides): Promise<string>;

  receiverExecutePayment(
    _paymentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "receiverExecutePayment(uint256)"(
    _paymentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getPeriod(
    _periodId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
      isCurrent: boolean;
      startTime: BigNumber;
      endTime: BigNumber;
      firstTransactionId: BigNumber;
      lastTransactionId: BigNumber;
    }
  >;

  "getPeriod(uint64)"(
    _periodId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
      isCurrent: boolean;
      startTime: BigNumber;
      endTime: BigNumber;
      firstTransactionId: BigNumber;
      lastTransactionId: BigNumber;
    }
  >;

  setPeriodDuration(
    _periodDuration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPeriodDuration(uint64)"(
    _periodDuration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  periodsLength(overrides?: CallOverrides): Promise<BigNumber>;

  "periodsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  setBudget(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBudget(address,uint256)"(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowRecoverability(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "allowRecoverability(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  appId(overrides?: CallOverrides): Promise<string>;

  "appId()"(overrides?: CallOverrides): Promise<string>;

  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "getInitializationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  recoverToVault(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "recoverToVault(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  EXECUTE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<string>;

  "EXECUTE_PAYMENTS_ROLE()"(overrides?: CallOverrides): Promise<string>;

  currentPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

  "currentPeriodId()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferToVault(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferToVault(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  canPerform(
    _sender: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canPerform(address,bytes32,uint256[])"(
    _sender: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

  "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<string>;

  tryTransitionAccountingPeriod(
    _maxTransitions: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tryTransitionAccountingPeriod(uint64)"(
    _maxTransitions: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getPeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "getPeriodDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _token: string,
    _amount: BigNumberish,
    _reference: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deposit(address,uint256,string)"(
    _token: string,
    _amount: BigNumberish,
    _reference: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  nextPaymentTime(
    _paymentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "nextPaymentTime(uint256)"(
    _paymentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPeriodTokenStatement(
    _periodId: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { expenses: BigNumber; income: BigNumber }
  >;

  "getPeriodTokenStatement(uint64,address)"(
    _periodId: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { expenses: BigNumber; income: BigNumber }
  >;

  kernel(overrides?: CallOverrides): Promise<string>;

  "kernel()"(overrides?: CallOverrides): Promise<string>;

  paymentsNextIndex(overrides?: CallOverrides): Promise<BigNumber>;

  "paymentsNextIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

  isPetrified(overrides?: CallOverrides): Promise<boolean>;

  "isPetrified()"(overrides?: CallOverrides): Promise<boolean>;

  canMakePayment(
    _token: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canMakePayment(address,uint256)"(
    _token: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  MANAGE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<string>;

  "MANAGE_PAYMENTS_ROLE()"(overrides?: CallOverrides): Promise<string>;

  transactionsNextIndex(overrides?: CallOverrides): Promise<BigNumber>;

  "transactionsNextIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

  getRemainingBudget(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRemainingBudget(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  newImmediatePayment(
    _token: string,
    _receiver: string,
    _amount: BigNumberish,
    _reference: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newImmediatePayment(address,address,uint256,string)"(
    _token: string,
    _receiver: string,
    _amount: BigNumberish,
    _reference: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  "vault()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    hasInitialized(overrides?: CallOverrides): Promise<boolean>;

    "hasInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    CREATE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<string>;

    "CREATE_PAYMENTS_ROLE()"(overrides?: CallOverrides): Promise<string>;

    newScheduledPayment(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _initialPaymentTime: BigNumberish,
      _interval: BigNumberish,
      _maxExecutions: BigNumberish,
      _reference: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newScheduledPayment(address,address,uint256,uint64,uint64,uint64,string)"(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _initialPaymentTime: BigNumberish,
      _interval: BigNumberish,
      _maxExecutions: BigNumberish,
      _reference: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executePayment(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "executePayment(uint256)"(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _vault: string,
      _periodDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,uint64)"(
      _vault: string,
      _periodDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeBudget(_token: string, overrides?: CallOverrides): Promise<void>;

    "removeBudget(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getBudget(
      _token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { budget: BigNumber; hasBudget: boolean }
    >;

    "getBudget(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { budget: BigNumber; hasBudget: boolean }
    >;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    setPaymentStatus(
      _paymentId: BigNumberish,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPaymentStatus(uint256,bool)"(
      _paymentId: BigNumberish,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getPayment(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        string
      ] & {
        token: string;
        receiver: string;
        amount: BigNumber;
        initialPaymentTime: BigNumber;
        interval: BigNumber;
        maxExecutions: BigNumber;
        inactive: boolean;
        executions: BigNumber;
        createdBy: string;
      }
    >;

    "getPayment(uint256)"(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        string
      ] & {
        token: string;
        receiver: string;
        amount: BigNumber;
        initialPaymentTime: BigNumber;
        interval: BigNumber;
        maxExecutions: BigNumber;
        inactive: boolean;
        executions: BigNumber;
        createdBy: string;
      }
    >;

    getRecoveryVault(overrides?: CallOverrides): Promise<string>;

    "getRecoveryVault()"(overrides?: CallOverrides): Promise<string>;

    getTransaction(
      _transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        BigNumber
      ] & {
        periodId: BigNumber;
        amount: BigNumber;
        paymentId: BigNumber;
        paymentExecutionNumber: BigNumber;
        token: string;
        entity: string;
        isIncoming: boolean;
        date: BigNumber;
      }
    >;

    "getTransaction(uint256)"(
      _transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        BigNumber
      ] & {
        periodId: BigNumber;
        amount: BigNumber;
        paymentId: BigNumber;
        paymentExecutionNumber: BigNumber;
        token: string;
        entity: string;
        isIncoming: boolean;
        date: BigNumber;
      }
    >;

    CHANGE_PERIOD_ROLE(overrides?: CallOverrides): Promise<string>;

    "CHANGE_PERIOD_ROLE()"(overrides?: CallOverrides): Promise<string>;

    CHANGE_BUDGETS_ROLE(overrides?: CallOverrides): Promise<string>;

    "CHANGE_BUDGETS_ROLE()"(overrides?: CallOverrides): Promise<string>;

    receiverExecutePayment(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "receiverExecutePayment(uint256)"(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPeriod(
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        isCurrent: boolean;
        startTime: BigNumber;
        endTime: BigNumber;
        firstTransactionId: BigNumber;
        lastTransactionId: BigNumber;
      }
    >;

    "getPeriod(uint64)"(
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        isCurrent: boolean;
        startTime: BigNumber;
        endTime: BigNumber;
        firstTransactionId: BigNumber;
        lastTransactionId: BigNumber;
      }
    >;

    setPeriodDuration(
      _periodDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPeriodDuration(uint64)"(
      _periodDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    periodsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBudget(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBudget(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowRecoverability(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "allowRecoverability(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    appId(overrides?: CallOverrides): Promise<string>;

    "appId()"(overrides?: CallOverrides): Promise<string>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitializationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    recoverToVault(_token: string, overrides?: CallOverrides): Promise<void>;

    "recoverToVault(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    EXECUTE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<string>;

    "EXECUTE_PAYMENTS_ROLE()"(overrides?: CallOverrides): Promise<string>;

    currentPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriodId()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferToVault(_token: string, overrides?: CallOverrides): Promise<void>;

    "transferToVault(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canPerform(address,bytes32,uint256[])"(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

    "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<string>;

    tryTransitionAccountingPeriod(
      _maxTransitions: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "tryTransitionAccountingPeriod(uint64)"(
      _maxTransitions: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "getPeriodDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,uint256,string)"(
      _token: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nextPaymentTime(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nextPaymentTime(uint256)"(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodTokenStatement(
      _periodId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { expenses: BigNumber; income: BigNumber }
    >;

    "getPeriodTokenStatement(uint64,address)"(
      _periodId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { expenses: BigNumber; income: BigNumber }
    >;

    kernel(overrides?: CallOverrides): Promise<string>;

    "kernel()"(overrides?: CallOverrides): Promise<string>;

    paymentsNextIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "paymentsNextIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<boolean>;

    "isPetrified()"(overrides?: CallOverrides): Promise<boolean>;

    canMakePayment(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canMakePayment(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    MANAGE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<string>;

    "MANAGE_PAYMENTS_ROLE()"(overrides?: CallOverrides): Promise<string>;

    transactionsNextIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "transactionsNextIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRemainingBudget(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRemainingBudget(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newImmediatePayment(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "newImmediatePayment(address,address,uint256,string)"(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    "vault()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    NewPeriod(
      periodId: BigNumberish | null,
      periodStarts: null,
      periodEnds: null
    ): EventFilter;

    SetBudget(token: string | null, amount: null, hasBudget: null): EventFilter;

    NewPayment(
      paymentId: BigNumberish | null,
      recipient: string | null,
      maxExecutions: null,
      reference: null
    ): EventFilter;

    NewTransaction(
      transactionId: BigNumberish | null,
      incoming: null,
      entity: string | null,
      amount: null,
      reference: null
    ): EventFilter;

    ChangePaymentState(
      paymentId: BigNumberish | null,
      active: null
    ): EventFilter;

    ChangePeriodDuration(newDuration: null): EventFilter;

    PaymentFailure(paymentId: null): EventFilter;

    ScriptResult(
      executor: string | null,
      script: null,
      input: null,
      returnData: null
    ): EventFilter;

    RecoverToVault(
      vault: string | null,
      token: string | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    hasInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "hasInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "CREATE_PAYMENTS_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    newScheduledPayment(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _initialPaymentTime: BigNumberish,
      _interval: BigNumberish,
      _maxExecutions: BigNumberish,
      _reference: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "newScheduledPayment(address,address,uint256,uint64,uint64,uint64,string)"(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _initialPaymentTime: BigNumberish,
      _interval: BigNumberish,
      _maxExecutions: BigNumberish,
      _reference: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    executePayment(
      _paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executePayment(uint256)"(
      _paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _vault: string,
      _periodDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,uint64)"(
      _vault: string,
      _periodDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeBudget(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "removeBudget(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getBudget(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getBudget(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPaymentStatus(
      _paymentId: BigNumberish,
      _active: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPaymentStatus(uint256,bool)"(
      _paymentId: BigNumberish,
      _active: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getPayment(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPayment(uint256)"(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecoveryVault(overrides?: CallOverrides): Promise<BigNumber>;

    "getRecoveryVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTransaction(
      _transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTransaction(uint256)"(
      _transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CHANGE_PERIOD_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "CHANGE_PERIOD_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    CHANGE_BUDGETS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "CHANGE_BUDGETS_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    receiverExecutePayment(
      _paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "receiverExecutePayment(uint256)"(
      _paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getPeriod(
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPeriod(uint64)"(
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPeriodDuration(
      _periodDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPeriodDuration(uint64)"(
      _periodDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    periodsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBudget(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBudget(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowRecoverability(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowRecoverability(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    "appId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitializationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    recoverToVault(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "recoverToVault(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    EXECUTE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "EXECUTE_PAYMENTS_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriodId()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferToVault(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "transferToVault(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canPerform(address,bytes32,uint256[])"(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    tryTransitionAccountingPeriod(
      _maxTransitions: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tryTransitionAccountingPeriod(uint64)"(
      _maxTransitions: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getPeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "getPeriodDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "deposit(address,uint256,string)"(
      _token: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    nextPaymentTime(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nextPaymentTime(uint256)"(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodTokenStatement(
      _periodId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPeriodTokenStatement(uint64,address)"(
      _periodId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    "kernel()"(overrides?: CallOverrides): Promise<BigNumber>;

    paymentsNextIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "paymentsNextIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<BigNumber>;

    "isPetrified()"(overrides?: CallOverrides): Promise<BigNumber>;

    canMakePayment(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canMakePayment(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MANAGE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "MANAGE_PAYMENTS_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    transactionsNextIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "transactionsNextIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRemainingBudget(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRemainingBudget(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newImmediatePayment(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "newImmediatePayment(address,address,uint256,string)"(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    "vault()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    hasInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hasInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_PAYMENTS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CREATE_PAYMENTS_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newScheduledPayment(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _initialPaymentTime: BigNumberish,
      _interval: BigNumberish,
      _maxExecutions: BigNumberish,
      _reference: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newScheduledPayment(address,address,uint256,uint64,uint64,uint64,string)"(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _initialPaymentTime: BigNumberish,
      _interval: BigNumberish,
      _maxExecutions: BigNumberish,
      _reference: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executePayment(
      _paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executePayment(uint256)"(
      _paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _vault: string,
      _periodDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,uint64)"(
      _vault: string,
      _periodDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeBudget(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeBudget(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBudget(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBudget(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPaymentStatus(
      _paymentId: BigNumberish,
      _active: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPaymentStatus(uint256,bool)"(
      _paymentId: BigNumberish,
      _active: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getPayment(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPayment(uint256)"(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecoveryVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRecoveryVault()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransaction(
      _transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTransaction(uint256)"(
      _transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHANGE_PERIOD_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CHANGE_PERIOD_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHANGE_BUDGETS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CHANGE_BUDGETS_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiverExecutePayment(
      _paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "receiverExecutePayment(uint256)"(
      _paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getPeriod(
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPeriod(uint64)"(
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPeriodDuration(
      _periodDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPeriodDuration(uint64)"(
      _periodDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    periodsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodsLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBudget(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBudget(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowRecoverability(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowRecoverability(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "appId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInitializationBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverToVault(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "recoverToVault(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    EXECUTE_PAYMENTS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "EXECUTE_PAYMENTS_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPeriodId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentPeriodId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferToVault(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canPerform(address,bytes32,uint256[])"(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEVMScriptRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tryTransitionAccountingPeriod(
      _maxTransitions: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tryTransitionAccountingPeriod(uint64)"(
      _maxTransitions: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getPeriodDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPeriodDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256,string)"(
      _token: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    nextPaymentTime(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextPaymentTime(uint256)"(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeriodTokenStatement(
      _periodId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPeriodTokenStatement(uint64,address)"(
      _periodId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "kernel()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentsNextIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paymentsNextIndex()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isPetrified()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canMakePayment(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canMakePayment(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MANAGE_PAYMENTS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MANAGE_PAYMENTS_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactionsNextIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transactionsNextIndex()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemainingBudget(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRemainingBudget(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newImmediatePayment(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newImmediatePayment(address,address,uint256,string)"(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
