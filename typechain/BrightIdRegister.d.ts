/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BrightIdRegisterInterface extends ethers.utils.Interface {
  functions: {
    "register(address[],uint256[],uint8[],bytes32[],bytes32[],address,bytes)": FunctionFragment;
    "hasInitialized()": FunctionFragment;
    "userRegistrations(address)": FunctionFragment;
    "requiredVerifications()": FunctionFragment;
    "getEVMScriptExecutor(bytes)": FunctionFragment;
    "getRecoveryVault()": FunctionFragment;
    "setVerificationTimestampVariance(uint256)": FunctionFragment;
    "brightIdContext()": FunctionFragment;
    "UPDATE_SETTINGS_ROLE()": FunctionFragment;
    "hasUniqueUserId(address)": FunctionFragment;
    "brightIdVerifiers(uint256)": FunctionFragment;
    "MAX_BRIGHTID_VERIFIERS()": FunctionFragment;
    "setRegistrationPeriod(uint256)": FunctionFragment;
    "registrationPeriod()": FunctionFragment;
    "getBrightIdVerifiers()": FunctionFragment;
    "allowRecoverability(address)": FunctionFragment;
    "appId()": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "transferToVault(address)": FunctionFragment;
    "canPerform(address,bytes32,uint256[])": FunctionFragment;
    "getEVMScriptRegistry()": FunctionFragment;
    "isVerified(address)": FunctionFragment;
    "uniqueUserId(address)": FunctionFragment;
    "kernel()": FunctionFragment;
    "isPetrified()": FunctionFragment;
    "setBrightIdVerifiers(address[],uint256)": FunctionFragment;
    "verificationTimestampVariance()": FunctionFragment;
    "MIN_BRIGHTID_VERIFIERS()": FunctionFragment;
    "initialize(bytes32,address[],uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "register",
    values: [
      string[],
      BigNumberish[],
      BigNumberish[],
      BytesLike[],
      BytesLike[],
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userRegistrations",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredVerifications",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptExecutor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setVerificationTimestampVariance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "brightIdContext",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_SETTINGS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasUniqueUserId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "brightIdVerifiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BRIGHTID_VERIFIERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistrationPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registrationPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBrightIdVerifiers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowRecoverability",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferToVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform",
    values: [string, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isVerified", values: [string]): string;
  encodeFunctionData(
    functionFragment: "uniqueUserId",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isPetrified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBrightIdVerifiers",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verificationTimestampVariance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_BRIGHTID_VERIFIERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike, string[], BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRegistrations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredVerifications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerificationTimestampVariance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "brightIdContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_SETTINGS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUniqueUserId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "brightIdVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BRIGHTID_VERIFIERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistrationPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBrightIdVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowRecoverability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVerified", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniqueUserId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPetrified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBrightIdVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verificationTimestampVariance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_BRIGHTID_VERIFIERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;

  events: {
    "Register(address)": EventFragment;
    "ScriptResult(address,bytes,bytes,bytes)": EventFragment;
    "RecoverToVault(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Register"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScriptResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoverToVault"): EventFragment;
}

export class BrightIdRegister extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BrightIdRegisterInterface;

  functions: {
    register(
      _addrs: string[],
      _timestamps: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      _registerAndCall: string,
      _functionCallData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "register(address[],uint256[],uint8[],bytes32[],bytes32[],address,bytes)"(
      _addrs: string[],
      _timestamps: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      _registerAndCall: string,
      _functionCallData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "hasInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    userRegistrations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        uniqueUserId: string;
        registerTime: BigNumber;
        addressVoid: boolean;
      }
    >;

    "userRegistrations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        uniqueUserId: string;
        registerTime: BigNumber;
        addressVoid: boolean;
      }
    >;

    requiredVerifications(overrides?: CallOverrides): Promise<[BigNumber]>;

    "requiredVerifications()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRecoveryVault(overrides?: CallOverrides): Promise<[string]>;

    "getRecoveryVault()"(overrides?: CallOverrides): Promise<[string]>;

    setVerificationTimestampVariance(
      _verificationTimestampVariance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVerificationTimestampVariance(uint256)"(
      _verificationTimestampVariance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    brightIdContext(overrides?: CallOverrides): Promise<[string]>;

    "brightIdContext()"(overrides?: CallOverrides): Promise<[string]>;

    UPDATE_SETTINGS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "UPDATE_SETTINGS_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    hasUniqueUserId(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasUniqueUserId(address)"(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    brightIdVerifiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "brightIdVerifiers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    MAX_BRIGHTID_VERIFIERS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_BRIGHTID_VERIFIERS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setRegistrationPeriod(
      _registrationPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRegistrationPeriod(uint256)"(
      _registrationPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registrationPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "registrationPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBrightIdVerifiers(overrides?: CallOverrides): Promise<[string[]]>;

    "getBrightIdVerifiers()"(overrides?: CallOverrides): Promise<[string[]]>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "allowRecoverability(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    "appId()"(overrides?: CallOverrides): Promise<[string]>;

    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getInitializationBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferToVault(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferToVault(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canPerform(address,bytes32,uint256[])"(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<[string]>;

    "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    isVerified(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isVerified(address)"(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    uniqueUserId(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "uniqueUserId(address)"(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    "kernel()"(overrides?: CallOverrides): Promise<[string]>;

    isPetrified(overrides?: CallOverrides): Promise<[boolean]>;

    "isPetrified()"(overrides?: CallOverrides): Promise<[boolean]>;

    setBrightIdVerifiers(
      _brightIdVerifiers: string[],
      _requiredVerifications: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBrightIdVerifiers(address[],uint256)"(
      _brightIdVerifiers: string[],
      _requiredVerifications: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    verificationTimestampVariance(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "verificationTimestampVariance()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MIN_BRIGHTID_VERIFIERS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MIN_BRIGHTID_VERIFIERS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _brightIdContext: BytesLike,
      _brightIdVerifiers: string[],
      _requiredVerifications: BigNumberish,
      _registrationPeriod: BigNumberish,
      _verificationTimestampVariance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(bytes32,address[],uint256,uint256,uint256)"(
      _brightIdContext: BytesLike,
      _brightIdVerifiers: string[],
      _requiredVerifications: BigNumberish,
      _registrationPeriod: BigNumberish,
      _verificationTimestampVariance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  register(
    _addrs: string[],
    _timestamps: BigNumberish[],
    _v: BigNumberish[],
    _r: BytesLike[],
    _s: BytesLike[],
    _registerAndCall: string,
    _functionCallData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "register(address[],uint256[],uint8[],bytes32[],bytes32[],address,bytes)"(
    _addrs: string[],
    _timestamps: BigNumberish[],
    _v: BigNumberish[],
    _r: BytesLike[],
    _s: BytesLike[],
    _registerAndCall: string,
    _functionCallData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasInitialized(overrides?: CallOverrides): Promise<boolean>;

  "hasInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  userRegistrations(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean] & {
      uniqueUserId: string;
      registerTime: BigNumber;
      addressVoid: boolean;
    }
  >;

  "userRegistrations(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean] & {
      uniqueUserId: string;
      registerTime: BigNumber;
      addressVoid: boolean;
    }
  >;

  requiredVerifications(overrides?: CallOverrides): Promise<BigNumber>;

  "requiredVerifications()"(overrides?: CallOverrides): Promise<BigNumber>;

  getEVMScriptExecutor(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getEVMScriptExecutor(bytes)"(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRecoveryVault(overrides?: CallOverrides): Promise<string>;

  "getRecoveryVault()"(overrides?: CallOverrides): Promise<string>;

  setVerificationTimestampVariance(
    _verificationTimestampVariance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVerificationTimestampVariance(uint256)"(
    _verificationTimestampVariance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  brightIdContext(overrides?: CallOverrides): Promise<string>;

  "brightIdContext()"(overrides?: CallOverrides): Promise<string>;

  UPDATE_SETTINGS_ROLE(overrides?: CallOverrides): Promise<string>;

  "UPDATE_SETTINGS_ROLE()"(overrides?: CallOverrides): Promise<string>;

  hasUniqueUserId(
    _brightIdUser: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasUniqueUserId(address)"(
    _brightIdUser: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  brightIdVerifiers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "brightIdVerifiers(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  MAX_BRIGHTID_VERIFIERS(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_BRIGHTID_VERIFIERS()"(overrides?: CallOverrides): Promise<BigNumber>;

  setRegistrationPeriod(
    _registrationPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRegistrationPeriod(uint256)"(
    _registrationPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registrationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "registrationPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  getBrightIdVerifiers(overrides?: CallOverrides): Promise<string[]>;

  "getBrightIdVerifiers()"(overrides?: CallOverrides): Promise<string[]>;

  allowRecoverability(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "allowRecoverability(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  appId(overrides?: CallOverrides): Promise<string>;

  "appId()"(overrides?: CallOverrides): Promise<string>;

  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "getInitializationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferToVault(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferToVault(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  canPerform(
    _sender: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canPerform(address,bytes32,uint256[])"(
    _sender: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

  "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<string>;

  isVerified(
    _brightIdUser: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isVerified(address)"(
    _brightIdUser: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  uniqueUserId(
    _brightIdUser: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "uniqueUserId(address)"(
    _brightIdUser: string,
    overrides?: CallOverrides
  ): Promise<string>;

  kernel(overrides?: CallOverrides): Promise<string>;

  "kernel()"(overrides?: CallOverrides): Promise<string>;

  isPetrified(overrides?: CallOverrides): Promise<boolean>;

  "isPetrified()"(overrides?: CallOverrides): Promise<boolean>;

  setBrightIdVerifiers(
    _brightIdVerifiers: string[],
    _requiredVerifications: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBrightIdVerifiers(address[],uint256)"(
    _brightIdVerifiers: string[],
    _requiredVerifications: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  verificationTimestampVariance(overrides?: CallOverrides): Promise<BigNumber>;

  "verificationTimestampVariance()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MIN_BRIGHTID_VERIFIERS(overrides?: CallOverrides): Promise<BigNumber>;

  "MIN_BRIGHTID_VERIFIERS()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _brightIdContext: BytesLike,
    _brightIdVerifiers: string[],
    _requiredVerifications: BigNumberish,
    _registrationPeriod: BigNumberish,
    _verificationTimestampVariance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(bytes32,address[],uint256,uint256,uint256)"(
    _brightIdContext: BytesLike,
    _brightIdVerifiers: string[],
    _requiredVerifications: BigNumberish,
    _registrationPeriod: BigNumberish,
    _verificationTimestampVariance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    register(
      _addrs: string[],
      _timestamps: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      _registerAndCall: string,
      _functionCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "register(address[],uint256[],uint8[],bytes32[],bytes32[],address,bytes)"(
      _addrs: string[],
      _timestamps: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      _registerAndCall: string,
      _functionCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    hasInitialized(overrides?: CallOverrides): Promise<boolean>;

    "hasInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    userRegistrations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        uniqueUserId: string;
        registerTime: BigNumber;
        addressVoid: boolean;
      }
    >;

    "userRegistrations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        uniqueUserId: string;
        registerTime: BigNumber;
        addressVoid: boolean;
      }
    >;

    requiredVerifications(overrides?: CallOverrides): Promise<BigNumber>;

    "requiredVerifications()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRecoveryVault(overrides?: CallOverrides): Promise<string>;

    "getRecoveryVault()"(overrides?: CallOverrides): Promise<string>;

    setVerificationTimestampVariance(
      _verificationTimestampVariance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVerificationTimestampVariance(uint256)"(
      _verificationTimestampVariance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    brightIdContext(overrides?: CallOverrides): Promise<string>;

    "brightIdContext()"(overrides?: CallOverrides): Promise<string>;

    UPDATE_SETTINGS_ROLE(overrides?: CallOverrides): Promise<string>;

    "UPDATE_SETTINGS_ROLE()"(overrides?: CallOverrides): Promise<string>;

    hasUniqueUserId(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasUniqueUserId(address)"(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    brightIdVerifiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "brightIdVerifiers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    MAX_BRIGHTID_VERIFIERS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_BRIGHTID_VERIFIERS()"(overrides?: CallOverrides): Promise<BigNumber>;

    setRegistrationPeriod(
      _registrationPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRegistrationPeriod(uint256)"(
      _registrationPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registrationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "registrationPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBrightIdVerifiers(overrides?: CallOverrides): Promise<string[]>;

    "getBrightIdVerifiers()"(overrides?: CallOverrides): Promise<string[]>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "allowRecoverability(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    appId(overrides?: CallOverrides): Promise<string>;

    "appId()"(overrides?: CallOverrides): Promise<string>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitializationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferToVault(_token: string, overrides?: CallOverrides): Promise<void>;

    "transferToVault(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canPerform(address,bytes32,uint256[])"(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

    "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<string>;

    isVerified(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isVerified(address)"(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    uniqueUserId(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "uniqueUserId(address)"(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<string>;

    kernel(overrides?: CallOverrides): Promise<string>;

    "kernel()"(overrides?: CallOverrides): Promise<string>;

    isPetrified(overrides?: CallOverrides): Promise<boolean>;

    "isPetrified()"(overrides?: CallOverrides): Promise<boolean>;

    setBrightIdVerifiers(
      _brightIdVerifiers: string[],
      _requiredVerifications: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBrightIdVerifiers(address[],uint256)"(
      _brightIdVerifiers: string[],
      _requiredVerifications: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    verificationTimestampVariance(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verificationTimestampVariance()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MIN_BRIGHTID_VERIFIERS(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_BRIGHTID_VERIFIERS()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _brightIdContext: BytesLike,
      _brightIdVerifiers: string[],
      _requiredVerifications: BigNumberish,
      _registrationPeriod: BigNumberish,
      _verificationTimestampVariance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(bytes32,address[],uint256,uint256,uint256)"(
      _brightIdContext: BytesLike,
      _brightIdVerifiers: string[],
      _requiredVerifications: BigNumberish,
      _registrationPeriod: BigNumberish,
      _verificationTimestampVariance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Register(sender: null): EventFilter;

    ScriptResult(
      executor: string | null,
      script: null,
      input: null,
      returnData: null
    ): EventFilter;

    RecoverToVault(
      vault: string | null,
      token: string | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    register(
      _addrs: string[],
      _timestamps: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      _registerAndCall: string,
      _functionCallData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "register(address[],uint256[],uint8[],bytes32[],bytes32[],address,bytes)"(
      _addrs: string[],
      _timestamps: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      _registerAndCall: string,
      _functionCallData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "hasInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    userRegistrations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userRegistrations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requiredVerifications(overrides?: CallOverrides): Promise<BigNumber>;

    "requiredVerifications()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecoveryVault(overrides?: CallOverrides): Promise<BigNumber>;

    "getRecoveryVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    setVerificationTimestampVariance(
      _verificationTimestampVariance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setVerificationTimestampVariance(uint256)"(
      _verificationTimestampVariance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    brightIdContext(overrides?: CallOverrides): Promise<BigNumber>;

    "brightIdContext()"(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATE_SETTINGS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "UPDATE_SETTINGS_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    hasUniqueUserId(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasUniqueUserId(address)"(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    brightIdVerifiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "brightIdVerifiers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_BRIGHTID_VERIFIERS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_BRIGHTID_VERIFIERS()"(overrides?: CallOverrides): Promise<BigNumber>;

    setRegistrationPeriod(
      _registrationPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRegistrationPeriod(uint256)"(
      _registrationPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registrationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "registrationPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBrightIdVerifiers(overrides?: CallOverrides): Promise<BigNumber>;

    "getBrightIdVerifiers()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowRecoverability(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    "appId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitializationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferToVault(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "transferToVault(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canPerform(address,bytes32,uint256[])"(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    isVerified(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isVerified(address)"(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniqueUserId(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "uniqueUserId(address)"(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    "kernel()"(overrides?: CallOverrides): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<BigNumber>;

    "isPetrified()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBrightIdVerifiers(
      _brightIdVerifiers: string[],
      _requiredVerifications: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBrightIdVerifiers(address[],uint256)"(
      _brightIdVerifiers: string[],
      _requiredVerifications: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    verificationTimestampVariance(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verificationTimestampVariance()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MIN_BRIGHTID_VERIFIERS(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_BRIGHTID_VERIFIERS()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _brightIdContext: BytesLike,
      _brightIdVerifiers: string[],
      _requiredVerifications: BigNumberish,
      _registrationPeriod: BigNumberish,
      _verificationTimestampVariance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(bytes32,address[],uint256,uint256,uint256)"(
      _brightIdContext: BytesLike,
      _brightIdVerifiers: string[],
      _requiredVerifications: BigNumberish,
      _registrationPeriod: BigNumberish,
      _verificationTimestampVariance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    register(
      _addrs: string[],
      _timestamps: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      _registerAndCall: string,
      _functionCallData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "register(address[],uint256[],uint8[],bytes32[],bytes32[],address,bytes)"(
      _addrs: string[],
      _timestamps: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      _registerAndCall: string,
      _functionCallData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hasInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRegistrations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userRegistrations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requiredVerifications(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requiredVerifications()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecoveryVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRecoveryVault()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setVerificationTimestampVariance(
      _verificationTimestampVariance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVerificationTimestampVariance(uint256)"(
      _verificationTimestampVariance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    brightIdContext(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "brightIdContext()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPDATE_SETTINGS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "UPDATE_SETTINGS_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasUniqueUserId(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasUniqueUserId(address)"(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    brightIdVerifiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "brightIdVerifiers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_BRIGHTID_VERIFIERS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAX_BRIGHTID_VERIFIERS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRegistrationPeriod(
      _registrationPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRegistrationPeriod(uint256)"(
      _registrationPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registrationPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "registrationPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBrightIdVerifiers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBrightIdVerifiers()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowRecoverability(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "appId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInitializationBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferToVault(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canPerform(address,bytes32,uint256[])"(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEVMScriptRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVerified(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isVerified(address)"(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniqueUserId(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uniqueUserId(address)"(
      _brightIdUser: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "kernel()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isPetrified()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBrightIdVerifiers(
      _brightIdVerifiers: string[],
      _requiredVerifications: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBrightIdVerifiers(address[],uint256)"(
      _brightIdVerifiers: string[],
      _requiredVerifications: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    verificationTimestampVariance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verificationTimestampVariance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_BRIGHTID_VERIFIERS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MIN_BRIGHTID_VERIFIERS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _brightIdContext: BytesLike,
      _brightIdVerifiers: string[],
      _requiredVerifications: BigNumberish,
      _registrationPeriod: BigNumberish,
      _verificationTimestampVariance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(bytes32,address[],uint256,uint256,uint256)"(
      _brightIdContext: BytesLike,
      _brightIdVerifiers: string[],
      _requiredVerifications: BigNumberish,
      _registrationPeriod: BigNumberish,
      _verificationTimestampVariance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
