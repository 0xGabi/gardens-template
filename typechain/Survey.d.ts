/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SurveyInterface extends ethers.utils.Interface {
  functions: {
    "changeMinAcceptParticipationPct(uint64)": FunctionFragment;
    "hasInitialized()": FunctionFragment;
    "resetVote(uint256)": FunctionFragment;
    "minParticipationPct()": FunctionFragment;
    "getEVMScriptExecutor(bytes)": FunctionFragment;
    "getRecoveryVault()": FunctionFragment;
    "getVoterState(uint256,address)": FunctionFragment;
    "MODIFY_PARTICIPATION_ROLE()": FunctionFragment;
    "voteOption(uint256,uint256)": FunctionFragment;
    "isParticipationAchieved(uint256)": FunctionFragment;
    "voteOptions(uint256,uint256[],uint256[])": FunctionFragment;
    "allowRecoverability(address)": FunctionFragment;
    "appId()": FunctionFragment;
    "getSurvey(uint256)": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "surveyTime()": FunctionFragment;
    "initialize(address,uint64,uint64)": FunctionFragment;
    "transferToVault(address)": FunctionFragment;
    "canPerform(address,bytes32,uint256[])": FunctionFragment;
    "getEVMScriptRegistry()": FunctionFragment;
    "CREATE_SURVEYS_ROLE()": FunctionFragment;
    "ABSTAIN_VOTE()": FunctionFragment;
    "getOptionPower(uint256,uint256)": FunctionFragment;
    "canVote(uint256,address)": FunctionFragment;
    "kernel()": FunctionFragment;
    "isPetrified()": FunctionFragment;
    "surveysLength()": FunctionFragment;
    "token()": FunctionFragment;
    "PCT_BASE()": FunctionFragment;
    "newSurvey(string,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeMinAcceptParticipationPct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minParticipationPct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptExecutor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterState",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "MODIFY_PARTICIPATION_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voteOption",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isParticipationAchieved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOptions",
    values: [BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowRecoverability",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSurvey",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "surveyTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform",
    values: [string, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_SURVEYS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ABSTAIN_VOTE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOptionPower",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canVote",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isPetrified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "surveysLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "PCT_BASE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newSurvey",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeMinAcceptParticipationPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minParticipationPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MODIFY_PARTICIPATION_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voteOption", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isParticipationAchieved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowRecoverability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSurvey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "surveyTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_SURVEYS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ABSTAIN_VOTE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptionPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPetrified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "surveysLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PCT_BASE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newSurvey", data: BytesLike): Result;

  events: {
    "StartSurvey(uint256,address,string)": EventFragment;
    "CastVote(uint256,address,uint256,uint256,uint256)": EventFragment;
    "ResetVote(uint256,address,uint256,uint256,uint256)": EventFragment;
    "ChangeMinParticipation(uint64)": EventFragment;
    "ScriptResult(address,bytes,bytes,bytes)": EventFragment;
    "RecoverToVault(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StartSurvey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CastVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeMinParticipation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScriptResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoverToVault"): EventFragment;
}

export class Survey extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SurveyInterface;

  functions: {
    changeMinAcceptParticipationPct(
      _minParticipationPct: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeMinAcceptParticipationPct(uint64)"(
      _minParticipationPct: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "hasInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    resetVote(
      _surveyId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "resetVote(uint256)"(
      _surveyId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    minParticipationPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minParticipationPct()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRecoveryVault(overrides?: CallOverrides): Promise<[string]>;

    "getRecoveryVault()"(overrides?: CallOverrides): Promise<[string]>;

    getVoterState(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & { options: BigNumber[]; stakes: BigNumber[] }
    >;

    "getVoterState(uint256,address)"(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & { options: BigNumber[]; stakes: BigNumber[] }
    >;

    MODIFY_PARTICIPATION_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "MODIFY_PARTICIPATION_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    voteOption(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "voteOption(uint256,uint256)"(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isParticipationAchieved(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isParticipationAchieved(uint256)"(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    voteOptions(
      _surveyId: BigNumberish,
      _optionIds: BigNumberish[],
      _stakes: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "voteOptions(uint256,uint256[],uint256[])"(
      _surveyId: BigNumberish,
      _optionIds: BigNumberish[],
      _stakes: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "allowRecoverability(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    "appId()"(overrides?: CallOverrides): Promise<[string]>;

    getSurvey(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        open: boolean;
        startDate: BigNumber;
        snapshotBlock: BigNumber;
        minParticipation: BigNumber;
        votingPower: BigNumber;
        participation: BigNumber;
        options: BigNumber;
      }
    >;

    "getSurvey(uint256)"(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        open: boolean;
        startDate: BigNumber;
        snapshotBlock: BigNumber;
        minParticipation: BigNumber;
        votingPower: BigNumber;
        participation: BigNumber;
        options: BigNumber;
      }
    >;

    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getInitializationBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    surveyTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "surveyTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _token: string,
      _minParticipationPct: BigNumberish,
      _surveyTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,uint64,uint64)"(
      _token: string,
      _minParticipationPct: BigNumberish,
      _surveyTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferToVault(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canPerform(address,bytes32,uint256[])"(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<[string]>;

    "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    CREATE_SURVEYS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "CREATE_SURVEYS_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    ABSTAIN_VOTE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ABSTAIN_VOTE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOptionPower(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getOptionPower(uint256,uint256)"(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canVote(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canVote(uint256,address)"(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    "kernel()"(overrides?: CallOverrides): Promise<[string]>;

    isPetrified(overrides?: CallOverrides): Promise<[boolean]>;

    "isPetrified()"(overrides?: CallOverrides): Promise<[boolean]>;

    surveysLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "surveysLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    PCT_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PCT_BASE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    newSurvey(
      _metadata: string,
      _options: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newSurvey(string,uint256)"(
      _metadata: string,
      _options: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  changeMinAcceptParticipationPct(
    _minParticipationPct: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeMinAcceptParticipationPct(uint64)"(
    _minParticipationPct: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasInitialized(overrides?: CallOverrides): Promise<boolean>;

  "hasInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  resetVote(
    _surveyId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "resetVote(uint256)"(
    _surveyId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  minParticipationPct(overrides?: CallOverrides): Promise<BigNumber>;

  "minParticipationPct()"(overrides?: CallOverrides): Promise<BigNumber>;

  getEVMScriptExecutor(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getEVMScriptExecutor(bytes)"(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRecoveryVault(overrides?: CallOverrides): Promise<string>;

  "getRecoveryVault()"(overrides?: CallOverrides): Promise<string>;

  getVoterState(
    _surveyId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[]] & { options: BigNumber[]; stakes: BigNumber[] }
  >;

  "getVoterState(uint256,address)"(
    _surveyId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[]] & { options: BigNumber[]; stakes: BigNumber[] }
  >;

  MODIFY_PARTICIPATION_ROLE(overrides?: CallOverrides): Promise<string>;

  "MODIFY_PARTICIPATION_ROLE()"(overrides?: CallOverrides): Promise<string>;

  voteOption(
    _surveyId: BigNumberish,
    _optionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "voteOption(uint256,uint256)"(
    _surveyId: BigNumberish,
    _optionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isParticipationAchieved(
    _surveyId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isParticipationAchieved(uint256)"(
    _surveyId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  voteOptions(
    _surveyId: BigNumberish,
    _optionIds: BigNumberish[],
    _stakes: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "voteOptions(uint256,uint256[],uint256[])"(
    _surveyId: BigNumberish,
    _optionIds: BigNumberish[],
    _stakes: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowRecoverability(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "allowRecoverability(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  appId(overrides?: CallOverrides): Promise<string>;

  "appId()"(overrides?: CallOverrides): Promise<string>;

  getSurvey(
    _surveyId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      open: boolean;
      startDate: BigNumber;
      snapshotBlock: BigNumber;
      minParticipation: BigNumber;
      votingPower: BigNumber;
      participation: BigNumber;
      options: BigNumber;
    }
  >;

  "getSurvey(uint256)"(
    _surveyId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      open: boolean;
      startDate: BigNumber;
      snapshotBlock: BigNumber;
      minParticipation: BigNumber;
      votingPower: BigNumber;
      participation: BigNumber;
      options: BigNumber;
    }
  >;

  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "getInitializationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  surveyTime(overrides?: CallOverrides): Promise<BigNumber>;

  "surveyTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _token: string,
    _minParticipationPct: BigNumberish,
    _surveyTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,uint64,uint64)"(
    _token: string,
    _minParticipationPct: BigNumberish,
    _surveyTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferToVault(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferToVault(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  canPerform(
    _sender: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canPerform(address,bytes32,uint256[])"(
    _sender: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

  "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<string>;

  CREATE_SURVEYS_ROLE(overrides?: CallOverrides): Promise<string>;

  "CREATE_SURVEYS_ROLE()"(overrides?: CallOverrides): Promise<string>;

  ABSTAIN_VOTE(overrides?: CallOverrides): Promise<BigNumber>;

  "ABSTAIN_VOTE()"(overrides?: CallOverrides): Promise<BigNumber>;

  getOptionPower(
    _surveyId: BigNumberish,
    _optionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getOptionPower(uint256,uint256)"(
    _surveyId: BigNumberish,
    _optionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canVote(
    _surveyId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canVote(uint256,address)"(
    _surveyId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  kernel(overrides?: CallOverrides): Promise<string>;

  "kernel()"(overrides?: CallOverrides): Promise<string>;

  isPetrified(overrides?: CallOverrides): Promise<boolean>;

  "isPetrified()"(overrides?: CallOverrides): Promise<boolean>;

  surveysLength(overrides?: CallOverrides): Promise<BigNumber>;

  "surveysLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  PCT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  "PCT_BASE()"(overrides?: CallOverrides): Promise<BigNumber>;

  newSurvey(
    _metadata: string,
    _options: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newSurvey(string,uint256)"(
    _metadata: string,
    _options: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    changeMinAcceptParticipationPct(
      _minParticipationPct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeMinAcceptParticipationPct(uint64)"(
      _minParticipationPct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    hasInitialized(overrides?: CallOverrides): Promise<boolean>;

    "hasInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    resetVote(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "resetVote(uint256)"(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    minParticipationPct(overrides?: CallOverrides): Promise<BigNumber>;

    "minParticipationPct()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRecoveryVault(overrides?: CallOverrides): Promise<string>;

    "getRecoveryVault()"(overrides?: CallOverrides): Promise<string>;

    getVoterState(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & { options: BigNumber[]; stakes: BigNumber[] }
    >;

    "getVoterState(uint256,address)"(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & { options: BigNumber[]; stakes: BigNumber[] }
    >;

    MODIFY_PARTICIPATION_ROLE(overrides?: CallOverrides): Promise<string>;

    "MODIFY_PARTICIPATION_ROLE()"(overrides?: CallOverrides): Promise<string>;

    voteOption(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "voteOption(uint256,uint256)"(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isParticipationAchieved(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isParticipationAchieved(uint256)"(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    voteOptions(
      _surveyId: BigNumberish,
      _optionIds: BigNumberish[],
      _stakes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "voteOptions(uint256,uint256[],uint256[])"(
      _surveyId: BigNumberish,
      _optionIds: BigNumberish[],
      _stakes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "allowRecoverability(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    appId(overrides?: CallOverrides): Promise<string>;

    "appId()"(overrides?: CallOverrides): Promise<string>;

    getSurvey(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        open: boolean;
        startDate: BigNumber;
        snapshotBlock: BigNumber;
        minParticipation: BigNumber;
        votingPower: BigNumber;
        participation: BigNumber;
        options: BigNumber;
      }
    >;

    "getSurvey(uint256)"(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        open: boolean;
        startDate: BigNumber;
        snapshotBlock: BigNumber;
        minParticipation: BigNumber;
        votingPower: BigNumber;
        participation: BigNumber;
        options: BigNumber;
      }
    >;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitializationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    surveyTime(overrides?: CallOverrides): Promise<BigNumber>;

    "surveyTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _token: string,
      _minParticipationPct: BigNumberish,
      _surveyTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,uint64,uint64)"(
      _token: string,
      _minParticipationPct: BigNumberish,
      _surveyTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToVault(_token: string, overrides?: CallOverrides): Promise<void>;

    "transferToVault(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canPerform(address,bytes32,uint256[])"(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

    "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<string>;

    CREATE_SURVEYS_ROLE(overrides?: CallOverrides): Promise<string>;

    "CREATE_SURVEYS_ROLE()"(overrides?: CallOverrides): Promise<string>;

    ABSTAIN_VOTE(overrides?: CallOverrides): Promise<BigNumber>;

    "ABSTAIN_VOTE()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOptionPower(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOptionPower(uint256,uint256)"(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canVote(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canVote(uint256,address)"(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    kernel(overrides?: CallOverrides): Promise<string>;

    "kernel()"(overrides?: CallOverrides): Promise<string>;

    isPetrified(overrides?: CallOverrides): Promise<boolean>;

    "isPetrified()"(overrides?: CallOverrides): Promise<boolean>;

    surveysLength(overrides?: CallOverrides): Promise<BigNumber>;

    "surveysLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    PCT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    "PCT_BASE()"(overrides?: CallOverrides): Promise<BigNumber>;

    newSurvey(
      _metadata: string,
      _options: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newSurvey(string,uint256)"(
      _metadata: string,
      _options: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    StartSurvey(
      surveyId: BigNumberish | null,
      creator: string | null,
      metadata: null
    ): EventFilter;

    CastVote(
      surveyId: BigNumberish | null,
      voter: string | null,
      option: null,
      stake: null,
      optionPower: null
    ): EventFilter;

    ResetVote(
      surveyId: BigNumberish | null,
      voter: string | null,
      option: null,
      previousStake: null,
      optionPower: null
    ): EventFilter;

    ChangeMinParticipation(minParticipationPct: null): EventFilter;

    ScriptResult(
      executor: string | null,
      script: null,
      input: null,
      returnData: null
    ): EventFilter;

    RecoverToVault(
      vault: string | null,
      token: string | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    changeMinAcceptParticipationPct(
      _minParticipationPct: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeMinAcceptParticipationPct(uint64)"(
      _minParticipationPct: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "hasInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    resetVote(
      _surveyId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "resetVote(uint256)"(
      _surveyId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    minParticipationPct(overrides?: CallOverrides): Promise<BigNumber>;

    "minParticipationPct()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecoveryVault(overrides?: CallOverrides): Promise<BigNumber>;

    "getRecoveryVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVoterState(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVoterState(uint256,address)"(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MODIFY_PARTICIPATION_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "MODIFY_PARTICIPATION_ROLE()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voteOption(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "voteOption(uint256,uint256)"(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isParticipationAchieved(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isParticipationAchieved(uint256)"(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voteOptions(
      _surveyId: BigNumberish,
      _optionIds: BigNumberish[],
      _stakes: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "voteOptions(uint256,uint256[],uint256[])"(
      _surveyId: BigNumberish,
      _optionIds: BigNumberish[],
      _stakes: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowRecoverability(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    "appId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSurvey(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSurvey(uint256)"(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitializationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    surveyTime(overrides?: CallOverrides): Promise<BigNumber>;

    "surveyTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _token: string,
      _minParticipationPct: BigNumberish,
      _surveyTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,uint64,uint64)"(
      _token: string,
      _minParticipationPct: BigNumberish,
      _surveyTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferToVault(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "transferToVault(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canPerform(address,bytes32,uint256[])"(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "getEVMScriptRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_SURVEYS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "CREATE_SURVEYS_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    ABSTAIN_VOTE(overrides?: CallOverrides): Promise<BigNumber>;

    "ABSTAIN_VOTE()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOptionPower(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOptionPower(uint256,uint256)"(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canVote(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canVote(uint256,address)"(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    "kernel()"(overrides?: CallOverrides): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<BigNumber>;

    "isPetrified()"(overrides?: CallOverrides): Promise<BigNumber>;

    surveysLength(overrides?: CallOverrides): Promise<BigNumber>;

    "surveysLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    PCT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    "PCT_BASE()"(overrides?: CallOverrides): Promise<BigNumber>;

    newSurvey(
      _metadata: string,
      _options: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "newSurvey(string,uint256)"(
      _metadata: string,
      _options: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeMinAcceptParticipationPct(
      _minParticipationPct: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeMinAcceptParticipationPct(uint64)"(
      _minParticipationPct: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hasInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resetVote(
      _surveyId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "resetVote(uint256)"(
      _surveyId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    minParticipationPct(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minParticipationPct()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEVMScriptExecutor(bytes)"(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecoveryVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRecoveryVault()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterState(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVoterState(uint256,address)"(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MODIFY_PARTICIPATION_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MODIFY_PARTICIPATION_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteOption(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "voteOption(uint256,uint256)"(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isParticipationAchieved(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isParticipationAchieved(uint256)"(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteOptions(
      _surveyId: BigNumberish,
      _optionIds: BigNumberish[],
      _stakes: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "voteOptions(uint256,uint256[],uint256[])"(
      _surveyId: BigNumberish,
      _optionIds: BigNumberish[],
      _stakes: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowRecoverability(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "appId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSurvey(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSurvey(uint256)"(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInitializationBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    surveyTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "surveyTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _token: string,
      _minParticipationPct: BigNumberish,
      _surveyTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,uint64,uint64)"(
      _token: string,
      _minParticipationPct: BigNumberish,
      _surveyTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferToVault(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canPerform(address,bytes32,uint256[])"(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEVMScriptRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_SURVEYS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CREATE_SURVEYS_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ABSTAIN_VOTE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ABSTAIN_VOTE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOptionPower(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOptionPower(uint256,uint256)"(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canVote(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canVote(uint256,address)"(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "kernel()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isPetrified()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    surveysLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "surveysLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PCT_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PCT_BASE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newSurvey(
      _metadata: string,
      _options: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newSurvey(string,uint256)"(
      _metadata: string,
      _options: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
